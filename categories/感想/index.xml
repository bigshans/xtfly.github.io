<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>感想 on 蘭陵N散記</title>
    <link>http://lanlingzi.cn/categories/%E6%84%9F%E6%83%B3/index.xml</link>
    <description>Recent content in 感想 on 蘭陵N散記</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <atom:link href="http://lanlingzi.cn/categories/%E6%84%9F%E6%83%B3/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>35还能做技术吗</title>
      <link>http://lanlingzi.cn/post/thoughts/2017/0208_35_change/</link>
      <pubDate>Wed, 08 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>http://lanlingzi.cn/post/thoughts/2017/0208_35_change/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://lanlingzi.cn/images/change/change.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;最近我司心声社区到处充斥着在40岁左右惯例的帖子，之前觉得这些觉得离自己很远。不经意发现自己今年也35岁了，惯例这一天迟早会来临，只是早晚而已，按目前现状，再为公司奋斗也不会有太多年了，你想奋斗关键公司不让你啊。最近也陆续听到之前曾经共事的同事，或由于身体原因，被沟通退休或离职；或由于绩效平平，合同到期不再续签；或由于种种原因，被进入战备预备队前途不明。公司主营业务已遇到瓶颈，整个行业暮色深沉，新的领域就开拓不足，公司高层也不断地发文要打粮食，熵减等等。总之：“山雨欲来风满楼”。&lt;/p&gt;

&lt;p&gt;35岁应该是一个年富力强的年龄，不应该发出“今年35，还能做技术吗？”这样的话题，其中透露出一丝不自信。话说三十而立，但目前这个年龄段，我是上有老，下有小，身上还背着几百万的房贷，说没有压力不是可能的。作一名软件工程师，在国内来说其职业生涯是相当短的。而我一直从事软件相关的工作，目前虽是做软件架构设计，但还是喜欢写写代码，一直没有找到自己明确的发展方向，一方面有我自身的性格原因，一方面能力的确有些偏科。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;我非常能理解公司最近一些HR政策，企业为了保持长期的活力，换血难免。不管这事是否有多么无情，站在企业的角度来说无疑是正确的，毕竟企业不是慈善机构。公司也不可能让一个上了年龄、有家室的人一直从事一线编码工作。公司注重的是流程管理，觉得编码也可以像产业工人一样批量地生产。而年轻人更能干得多，给予得少。即使最近提倡的工程师文化，也是很难真正地做到，越提倡说明越缺失。&lt;/p&gt;

&lt;p&gt;先简单说一说我为什么走上软件开发这一条路的经历吧：&lt;/p&gt;

&lt;p&gt;90年代还是读初中时，老爸单位就开始使用电脑记账，那时觉得电脑太神奇了。个人虽买不起电脑，而要求老爸买了学习机，当时按着说明书，用basic语言输出满屏幕的各种形状的图型，心中也被巨大的喜悦填满。目前我清楚地记得，我爷爷看到我能在学习机上打出全家的名字，觉得这个是怎么做到的而不可思议。&lt;/p&gt;

&lt;p&gt;高考那一年，我一表哥从大学里寄来一本小说《第一次亲密地接触》，讲得就是网络交友，原来交朋友也可能通过互联网，当时觉得这个太好玩了。于是高考填写志愿，我报了某211计算机专业，可惜语文成绩刚及格，总分数不够（在本省就招3个，我排名第6，我爸通过关系才知道的）。还好有个第三志愿保底，并且填写可以调剂，于是我调转到另一所大学，学的是信息管理。妈蛋，到学校才知道，这个信息管理其实与计算机不太相关，虽然也会学些计算机原理，C语言编程等。但这不是主业，主业是信息检索，运筹学，是一个从图书馆管理发展起来杂学科，什么都学，什么都浅。&lt;/p&gt;

&lt;p&gt;大学一年级第二学期就买了电脑，一买电脑，就没有心思学习了，第一年还拿奖学金，后面连课不上了。每天大部分时间都在折腾电脑，重装系统，Win系统不知安装了多少次；Linux当时还远没有现在好用，也折腾过蓝点，RedHat。除了折腾就是打游戏，或者泡在网上看各种论坛。计算机理论没有怎么学，但其间还是有些编程的基础，曾获得校编程比赛三等奖。后面也和同学搞搞网站，系网站还是我们整理的，界面虽然丑点，但蛮有满足感。&lt;/p&gt;

&lt;p&gt;04年大学毕业后就来了深圳，开始家里就给我安排了一份工作，是做物业管理。但我不是这种菜，没有干一天，就辞职不做了，现在想想年轻就是任性啊。出来就自己开始找工作，找来找去，发现只有做网站的公司要我，于是第一年我就在一家当时在体育界还算小有名气的小公司做一名程序员，负责后台的程序开发，从此就踏上了软件开发这一条道路。后来05年华为大规模地招新四军，经过电话面试，当面做题，也没有怎么答好就稀里糊涂地来了华为，真还得谢谢当时的技面官。后面更没有想到的事，有些同学纷纷转行，中间也有过多次的机会离开，而我却一干就是12年了。&lt;/p&gt;

&lt;p&gt;在华为一直干得比较辛苦，结婚生小孩之后，发现再不能跟小伙伴一直挑灯夜战了。之前也不是没有奋斗过：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;去国外出差，可以整夜不睡觉，为了就是调通一个功能，等着明天客户可以验收。而这样的状况是持续的，每天吃不好，睡不着，最后回来发现落下胃病。&lt;/li&gt;
&lt;li&gt;可以持续一个多月每天晚上11:30下班，回到公司附近的出租屋倒头就睡，明天又接着干。&lt;/li&gt;
&lt;li&gt;可以凌晨不知几点，一个电话把你叫醒，说日志发到你邮箱，尽快定位解决问题。&lt;/li&gt;
&lt;li&gt;可以明知道不可能完成的任务，还是坚持答应下来，即使周末过来，也要加班加点把它做完。&lt;/li&gt;
&lt;li&gt;&amp;hellip;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;当过了三十多岁，的确现发现状态不如以前了，说一下感受吧：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;明显感觉体力不行了。以前定位解决问题，搞到凌晨三四点也没有什么睡意，第二天精神也不错。现在如果要搞到凌晨或通宵的话，后面两三天觉得身心疲惫。&lt;/li&gt;
&lt;li&gt;亚健康状态，平时锻炼比较少。每年的体检都有不少的问题，坐久了时间就觉得腰，颈椎痛。&lt;/li&gt;
&lt;li&gt;记忆力没有以前好了。以前看过的代码，长时间能记住，定位问题总是比其它人快速。看过的资料，吸收没有哪么快了，记得的东西有时突然就想不起来。&lt;/li&gt;
&lt;li&gt;明显感觉脑力跟不上了。以前码代码非常地快，一周就写10K；现在写代码总是思前想后，生产率没有那么高，但现在质量可能更好一些。想问题时注意力容易被打断，打断之后再难回神。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;当然这些年也积累了非常多的经验：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;尤其是攻关方面，我总是能解决问题，因为之前踩过不少的坑，看过不少的坑，也解决过不少的坑，问题总是本质一样的。写代码会本能地避免，定位总是会举一反三。&lt;/li&gt;
&lt;li&gt;知道怎么去做方案设计，分解并指导新人完成一个系统。有些问题能轻车熟路，以前解决类似问题的方案可以拿来复用。&lt;/li&gt;
&lt;li&gt;知道系统架构一些设计原则，理论基础，抽象建模，知道如何去权衡一些方案的利弊等。&lt;/li&gt;
&lt;li&gt;知识不再局限于编程语言，知道从多角度，多层次来看待一些问题，也在尝试去提炼一些编程之外的东西。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;热爱与钻研技术这个没有错，也不会随着年龄大了就不行了。虽然软件界的技术日新月益，编程语言层出不穷，各种框架各领风骚，但解决实现问题的经验与能力是非常重要的。现在你跟一群年轻人去拼体力拼时间，肯定是拼不过了，唯有作出转变。以前可能是“我能力强，效率高，部门的关键人物”，其实那是错的，不可替代性才是最有价值的。“人无远虑，必有近忧”，平时不妨努力提升自己，专注于某一领域，你能想到别人所想不到的，您能解决别人所处理不了的。编程只是一种解决问题的手段，技术也不仅仅只是编程。简单地说对于通用软件领域，当前主要的价值是如何构建分布式的架构体系统，以应对不断变化的商业模式与体量。&lt;/p&gt;

&lt;p&gt;当然上面说的还是一条技术路线，更重要的是你想明白技术只是为了产品，为了商业模式服务的。要让自己增值，不再吃码农的青春饭，那就要改变自己的想法，以快速适应未知的变化。积累系统架构经验，积累技术把控能力，积累对商业的理解，积累发现机会的敏感，果敢地作出改变。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>要学会思维图形化</title>
      <link>http://lanlingzi.cn/post/thoughts/2016/1118_arch_drawing/</link>
      <pubDate>Fri, 18 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>http://lanlingzi.cn/post/thoughts/2016/1118_arch_drawing/</guid>
      <description>&lt;p&gt;曾经，我幼稚地认为：只有写好代码才能对产品最“大”的贡献。什么需求分析文档，架构设计文档，没有最终的代码落地，那就是一张张的空纸。那些职位高高在上的架构师们，就也是写写胶片，画画图，他们又不懂技术细节，天天开会讨论来，讨论去都是在空谈一切。没有我们这些屌丝写的代码，你让他们去实现，估计几年也搞不出来。我写代码的能力比他们顶上N个人；再看看人家老外，60/70岁了还在码代码。为什么我国到了30岁了，都不去写代码了，都去搞所谓的架构设计了。是他们写代码写不好才去干架构师活吗？&lt;/p&gt;

&lt;p&gt;经过这么多年在产品中挖坑、填坑，发现我们的产品是越来越复杂，但使用上也是越来越复杂，问题也是越来越难理清。我们的问题到底是出在什么地方：
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;数据不可靠，系统常出错&lt;/li&gt;
&lt;li&gt;增加新需求困难，场景总是覆盖不全&lt;/li&gt;
&lt;li&gt;系统之间集成各种问题难以轻易解决&lt;/li&gt;
&lt;li&gt;交付不同局点，代码总是改来改去&lt;/li&gt;
&lt;li&gt;每年代码量成倍增加，前辈的代码看不懂、改不动&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这其实是光写好代码是不能解决上述问题的。只有你经历过，感受到，才能认识到系统的架构是何其重要。作为曾经一名码农，这几年一直在设计部与架构部工作，总是羡慕那些高级别的架构师：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;他们思考问题角度完全不同，总能高屋建瓴概括总结&lt;/li&gt;
&lt;li&gt;他们思考问题比较全面，又能抽象提炼，让人快速抓住要要点&lt;/li&gt;
&lt;li&gt;他们们输出的胶片、图画非常简洁，优美，明了，无二义&lt;/li&gt;
&lt;li&gt;他们画出来图来指导解决集成问题，往往能一针见血地说明关键之处&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;为什么他们的图能画得那么好，胶片写得那么牛，而我们似乎绞尽脑汁也难画出一张满意的图，难写出几张像样的胶片，是什么原因？是画得太少，写得太少，经验不足，方法不对，无灵感，还是天赋？&lt;/p&gt;

&lt;p&gt;看到&lt;a href=&#34;https://zhuanlan.zhihu.com/intelligence&#34;&gt;采铜&lt;/a&gt;老师的文章才悄然大悟：原来，&lt;strong&gt;不仅是因为架构师需要丰富的实践经验、敏锐的分析能力，以及系统性的建模能力&lt;/strong&gt;，更主要的是因为：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;日常我们通过文字/讲故事是线性叙述，是人和时间的结合；而画图，是人与空间结合，理有助于思维拓展&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;推荐阅读：&lt;br /&gt;
[1] &lt;a href=&#34;https://zhuanlan.zhihu.com/p/19874517&#34;&gt;思维运筹学导论（原理篇）&lt;/a&gt;&lt;br /&gt;
[2] &lt;a href=&#34;https://zhuanlan.zhihu.com/p/19888228&#34;&gt;思维运筹学导论（实践篇 · 图形化 · 上）&lt;/a&gt;&lt;br /&gt;
[3] &lt;a href=&#34;https://zhuanlan.zhihu.com/p/19891814&#34;&gt;思维运筹学导论（实践篇 · 图形化 · 下）&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>团队管理</title>
      <link>http://lanlingzi.cn/post/thoughts/2016/1027_team_mgnt/</link>
      <pubDate>Thu, 27 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>http://lanlingzi.cn/post/thoughts/2016/1027_team_mgnt/</guid>
      <description>&lt;p&gt;最近由于Go语言项目，又带一个小团队。以前作为团队的Leader，总是遇到各种问题，尤其是如何管理好人很困惑。HW的组织相对是比较宽松的，内部号称是矩阵式，感觉一个团队的凝聚力个人还是来源于Leader的个人技术感召力。好吧，这个只是凭感觉的管理，这是远远不够的。&lt;/p&gt;

&lt;p&gt;作为一个技术团队的小Leader，整体来讲，它面临”业务“，”人“，”事“这三个方面的工作展开。这些是来源公司内牛人们的一些总结，我把他们纪录下来，是为了我更好地开展工作。
&lt;/p&gt;

&lt;h2 id=&#34;业务&#34;&gt;业务&lt;/h2&gt;

&lt;p&gt;虽是一个技术团队，所交付是面向客户交付的软件。两个方面是需要思考的：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;价值贡献&lt;/li&gt;
&lt;li&gt;满意度&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我们常说”质量是我们最后尊严，业务价值是我们存在之本“，道理简洁朗朗上口，但也是最难做好的，做好又是一白遮百丑。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;面向业务：核心竞争力，价值识别与规划&lt;/li&gt;
&lt;li&gt;面向业务&amp;amp;解决方案：领域级，变革项目级规划、运作&lt;/li&gt;
&lt;li&gt;满意度管理：面向业务（客户，用户）；面向解决方案；面向部门；面向合作伙伴&lt;/li&gt;
&lt;li&gt;Top产品，问题的攻关&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;人&#34;&gt;人&lt;/h2&gt;

&lt;p&gt;人的运用，对于Leader来说，是一项非常具有挑战的事，这需要Leader有很高的EQ与IQ。总结起来选用育留四个字：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;选&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;亲自招聘，选择合适的人&lt;/li&gt;
&lt;li&gt;已有员工中骨干识别&lt;/li&gt;
&lt;li&gt;非关键外包合作&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;用&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;角色与岗位排兵布阵&lt;/li&gt;
&lt;li&gt;合作外包&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;育&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;能力引入：公司内部交流：经验总结交流分享；部门内外专家交流；业界交流：参加相关技术峰会；高级顾问培训交流&lt;/li&gt;
&lt;li&gt;能力培养：提升人员技能；组织能力建设&lt;/li&gt;
&lt;li&gt;全程关注：事前辅导，事中监控，事后总结&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;留&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;绩效辅导&lt;/li&gt;
&lt;li&gt;即时激励&lt;/li&gt;
&lt;li&gt;组织氛围：员工座谈，组织集体活动，员工关怀（问题员工识别管理，异常事件处理）&lt;/li&gt;
&lt;li&gt;岗位流动&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;事&#34;&gt;事&lt;/h2&gt;

&lt;p&gt;以前作为一个团队的小Leader，感觉一天都在忙，但不知在忙些什么。管事恨不得像孙猴子能分身出来，但健身乏术，如何正确合理地授权也是考验Lader的水平。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;TopN问题与任务跟踪管理&lt;/li&gt;
&lt;li&gt;KPI管理：现状问题分析；改进计划（包括措施）；改进监控；达成评估&lt;/li&gt;
&lt;li&gt;风险管理&lt;/li&gt;
&lt;li&gt;技术持续改进：新技术引入；优秀实践；&lt;/li&gt;
&lt;li&gt;质量持续改进：质量文化；质量监控，问题日清日结；质量回溯；质量改进&lt;/li&gt;
&lt;li&gt;流程运作持续改进&lt;/li&gt;
&lt;li&gt;知识管理&lt;/li&gt;
&lt;li&gt;跨部门协同&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>软件变革下设计原则</title>
      <link>http://lanlingzi.cn/post/technical/2016/0910_soft_design/</link>
      <pubDate>Sat, 10 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>http://lanlingzi.cn/post/technical/2016/0910_soft_design/</guid>
      <description>&lt;p&gt;传统大型软件系统 ，多以功能需求驱动设计与开发。在体系结构上是一个单体应用，变更修改往往是牵一而发动全身；在系统生态上是一个封闭系统，系统集成是大量定制开发。单体封闭的系统在交付中面临着越来越多的挑战，提升系统的竞争力首先是在软件架构上先行。软件系统发展也需像硬件一样不断地更新换代，软件架构设计需要输入新的思维。只有在思想上彻底地变革，才能摆脱原有的束缚与局限性。&lt;/p&gt;

&lt;h2 id=&#34;体验为王&#34;&gt;体验为王&lt;/h2&gt;

&lt;p&gt;软件原本是一种信息技术发展不断地服务于各行各业，软件在实现上又是偏向技术性。如何让普通用户能够较好地使用软件，而不需要这方面的专业背景，需要思考软件减少数字与体验之间鸿沟。互联网思维一直讲求如何让用户感知到你对他的价值，而且把这个价值争取做到极致，超出用户的预期，这个就叫体验。只有用户产生体验之后，才能形成口碑。简而言之，体验的思想，就是从用户的感受出发，把它做到极致。
&lt;/p&gt;

&lt;p&gt;正如我们所见到的，iPhone的成功原因之一，就是注重用户的体验获得巨大的成功。今天，人们于弹指间操控丰富业务。无数应用，以碎片化的形式填满用户时间，连接起永远在线的数字生活。一个显见的事实是，“体验”正被尊奉为至高无上的法则，用户已重掌驱动行业发展的威权。&lt;/p&gt;

&lt;p&gt;曾经一位领导说我们的软件系统发展应该先是“能用”，再是“好用”，最后是“易用”。这其实也是软件系统从功能为主朝用户至上，体验为王方向发展。套用阿里一句词：“让天下没有难用的软件”。&lt;/p&gt;

&lt;p&gt;那如何能做到“体验为王”的软件设计呢？&lt;/p&gt;

&lt;p&gt;作名一名架构师，首先要始终以用户和角色为中心，要从原有的我能为你提供什么功能，转变成用户最需要什么为出发点。首先要把自己当成用户，如果连自己都不去使用自己设计的系统，又如何把系统设计好呢。&lt;/p&gt;

&lt;p&gt;有人说，软件架构设计不是UI/UE设计，架构设计是功能逻辑设计，是技术实现设计，是物理部署设计；而用户体验只是UI/UE都需要考虑的。UI设计，确切地说，用户使用界面上设计首先要考虑用户体验。但体验不仅仅是界面上的交互操作的易用性，心理感受等。试想，如果你浏览一个网页或使用一个App，虽UI设计非常符合用户的使用习惯，但响应速度却非常地慢。这也不会是好的体验。速度上需要零等待，存储上需要大容量，并发上需要高吞量。这些都需要在软件系统架构上着重设计。&lt;/p&gt;

&lt;p&gt;软件架构设计要以需求的场景化、实例化驱动设计。无法场景化的需求往往是伪需求。真正的需求是满足目标用户在特定场景下的目标。作为架构设计师，要弄清其中两个关键因素：1）目标用户；2）特定场景下的目标。&lt;/p&gt;

&lt;h2 id=&#34;平台为本&#34;&gt;平台为本&lt;/h2&gt;

&lt;p&gt;平台化分为技术支撑型平台和应用实现型平台。技术支撑型平台的用户为软件开发人员，提供者负责平台的维护和升级，用户负责基于平台的上层实现。这类平台包括软件中间件、开发工具、应用服务器等。应用实现型平台的用户为终端用户，提供者不但负责平台的维护和升级，还要负责实现基于平台的上层应用。&lt;/p&gt;

&lt;p&gt;平台化首先需要在架构设计上考虑系统的开放性，通常的做法是系统功能服务化，API化。采用标准的通信协议，让系统易于被集成。系统具备更好的应用开发和维护的工具和接口，实施时可以迅速根据用户的特点进行部署和二次开发，用户可以最大限度地使用贴近自身特点来重新定义软件功能。&lt;/p&gt;

&lt;p&gt;像Saleforce等SaaS平台一样，平台化使运行于上层的应用软件在某种程度上做到与技术无关，而是面向具体业务，提供更为领域化的DSL。平台化提供各种易于组装的套件，可定制修改的业务模板。这样才能面向合作伙伴，构建平台之上的工具链，生态社区等。&lt;/p&gt;

&lt;p&gt;软件系统在研发和使用过程中需求变更不可避免。平台化的软件也在架构设计上，需地支持系统的平滑演进与对外接口兼容。这也需要在设计上考虑平台与上层业务之间的边界划分。上层的业务是最为变更频繁的，一是业务领域特性一般的变更不要侵入到平台。其二、平台的发展也不能影响上层业务的运行。当系统面对市场需要时，要评估这些需求是否需要在平台增加或改动哪些功能，平台软件是要随着客户需求而发展演进的。只有不断切合上层业务发展诉求的平台才具有更久的生命力。&lt;/p&gt;

&lt;h2 id=&#34;内生敏捷&#34;&gt;内生敏捷&lt;/h2&gt;

&lt;p&gt;业务逻辑复杂多变，如何保证程序逻辑的代码稳定是架构师需要解决的问题，良好的模块划分和扩展性强的接口设计都是解决这个问题的利器。微服务化，大系统小做。系统分解的目标并不仅仅是搞出一堆很小的服务，这不是目标；真正的目标是解决系统在业务急剧增长时遇到的问题。&lt;/p&gt;

&lt;p&gt;模块化，微服务化的让某一个功能足够内聚，足够小，代码容易理解、开发效率提高。服务之间可以独立部署，微服务架构让持续集成（CI），持续部署（CD）成为可能，基于数据化地构建软件生产流水线成为可能。各个服务之间可以在流水线上按功特性灵活组装。&lt;/p&gt;

&lt;p&gt;软件的本质是要面对各种业务需求的变化，这需要系统高度地抽象化，以不变来应对万变。使用一切可以减少编码的技术，例如元数据驱动。软件系统设计已经发展到使用运行时引擎从元数据（即关于应用程序本身的数据）生成应用程序组件的阶段。在一个定义良好的元数据驱动的体系结构中，已编译的运行时引擎（内核）、应用数据、描述一个应用程序的基础功能的元数据，以及与每个租户的数据和定制相关的元数据之间有一个明确的分离。这些明显的边界使人们有可能独立更新系统内核，修改的核心应用程序，或定制租户的具体组成部分，虚拟意义上来说，几乎不会影响其他人。&lt;/p&gt;

&lt;h2 id=&#34;数据驱动&#34;&gt;数据驱动&lt;/h2&gt;

&lt;p&gt;数据驱动是系统内生的数据感知，基于系统运行数据进行系统的预测与资源优化。数据驱动的终极目标是希望利用数据能够直接在生产环境带来改变，提供价值。&lt;/p&gt;

&lt;p&gt;数据驱动自动化干预，需要不断优化的分析算法，利用数据基础在特定领域完成基于算法的自动调整。算法线上部署除了对平台和算法本身的支持之外，还需要考虑：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;数据的及时性：实时数据和历史数据的组合，在特定周期下替换历史数据。&lt;/li&gt;
&lt;li&gt;异常数据的容忍：线上算法的输入无法做到离线的清洗水平，需要更健壮的数据预处理模块。&lt;/li&gt;
&lt;li&gt;算法的迭代：需要可靠的离线迭代平台来纠正线上算法运行过程中的误差和偏离。采集线上的数据到离线平台，通过离线平台调整参数和适应性。支持从离线平台推送新的算法。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一个系统的开放性，也体现在数据的开放性。系统架构上需考虑可被高层的系统，更深度的分析。不同维度与不同层次的分析，才能让数据变得更有价值。&lt;/p&gt;

&lt;h2 id=&#34;原生云化&#34;&gt;原生云化&lt;/h2&gt;

&lt;p&gt;原生云化指“Cloud Native”，它是多种不同思想的一个集合，这些思想帮助软件系统转移到云平台。这些思想包括DevOps、持续交付、微服务、敏捷基础设施、康威定律等。“Cloud Native”没有标准的官方定义，但包括如下几个特征：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;可移植：应用层与物理层隔离。应用从开发环境迁移到物理环境无需改变环境配置。&lt;/li&gt;
&lt;li&gt;自动化：通过持续集成和自我修复系统将IT基础设施的开发和部署进行自动化。&lt;/li&gt;
&lt;li&gt;效率提升：通过引入全新方式来降低运维成本，让系统管理员可以有更多时间去改进系统，而不是把时间都用在维护系统上。&lt;/li&gt;
&lt;li&gt;意识改变：DevOps的兴起以及运维和开发人员越来越多的共同协作发布服务，包括微服务和传统服务，让用户意识到服务发布的速度和敏捷性，已经和稳定性一样重要。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;原生云化的系统也是具有&lt;a href=&#34;https://12factor.net/&#34;&gt;12因子&lt;/a&gt;。原生云化首先考虑是的分布式一切。分布式架构可以以水平扩展，通过横向扩充节点，如一个节点扩充到多个节点，每个节点运行独立实例，节点与节点之间通过网络互连，随着节点扩充系统处理能力能够随之提升，单节点失效时，整个集群仍然可以对外提供服务。遵循12因子原则的应用程序，具有一致的架构接口。为了使创建的分布式应用马上就可以部署在云中，这些接口的构建采用一种无状态、面向进程的设计模式。&lt;/p&gt;

&lt;p&gt;多租户也是云计算的基本属性之一，原生云化的系统也必定是多租户架构的系统。利用多租户带来资源上高度共享模式，提高资源资源利用率，降低单位资源成本。但是共享资源越多，会带来租户的隔离性难度越大，成本越高。在按隔离程序不同层次，可分为物理多租架构与逻辑多租架构，物理多租架构技术如采用虚拟化技术，Docker容器，以及应用容器技术来隔离租户资源。逻辑多租架构技术如应用程序进程间隔离，数据切割隔离。&lt;/p&gt;

&lt;p&gt;原生云化的系统也是最大程度自动化。健壮自动化几乎能处理传统IT中需要手工处理的所有事情：当应用实例增减时更新路由器和负载均衡组件，部署应用所需的供应和联网服务，分配新的基础设施，设置监控和灾后恢复服务，日志聚合，当基础设施失效时重新部署应用。这些高级自动化实践，能把你从应对零日危险的痛苦中拯救出来：自动化采用滚动更新的方式，为每一个节点打上安全补丁，同时又保证服务一直在线。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>软件架构一些感想</title>
      <link>http://lanlingzi.cn/post/thoughts/2016/0319_arch_diathesis/</link>
      <pubDate>Sat, 19 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>http://lanlingzi.cn/post/thoughts/2016/0319_arch_diathesis/</guid>
      <description>&lt;h2 id=&#34;软件架构&#34;&gt;软件架构&lt;/h2&gt;

&lt;p&gt;软件系统架构不只是软件本身架构，它是一个全系统、全网络的架构，从层次上由低到高分为：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;程序架构&lt;/li&gt;
&lt;li&gt;系统架构&lt;/li&gt;
&lt;li&gt;产品架构&lt;/li&gt;
&lt;li&gt;生态、商业模式的架构&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;任何一个架构师，都是需要重点解决某方面的尖锐问题，同时避免在不合适的场景下，一种技术、一类框架或一种架构模式被滥用。架构就需要对整体框定好范围与约束。&lt;/p&gt;

&lt;p&gt;架构设计不可能面面俱到，要解决或是发挥关键路径上的资源合理有效的最大价值。一个好的架构，不会随着时间或业务的变换，而需要进行大的破坏性的变化。
&lt;/p&gt;

&lt;h2 id=&#34;架构演进&#34;&gt;架构演进&lt;/h2&gt;

&lt;p&gt;从互联网公司的角度来看，他们认为架构都是在实际应用过程中的生长，一开始就设计和实施面面俱到的架构是不符合互联网快速交付的方式的，不要过度设计，谁也不知道业务上线后业务量将会是一个什么量。&lt;/p&gt;

&lt;p&gt;架构的演进过程基本是围绕着性能，可靠性，扩展性，安全性，容灾展开。而对于可靠性，他们认为故障是不可能避免的，失败可能是常态，核心是如何地减少故障对用户或系统产生的影响范围。要提供有损服务，在故障的情况下，保证核心服务，可能放弃一些其它的服务。&lt;/p&gt;

&lt;p&gt;相对于电信业务，互联网公司的业务更侧重于用户体验，极致的响应速度与简单易用的体验是第一个设计原则。而电信业务传统是更侧重于可靠性，甚至零无损。&lt;/p&gt;

&lt;h2 id=&#34;架构师素质&#34;&gt;架构师素质&lt;/h2&gt;

&lt;p&gt;架构师要能充分理解用户需要，充分协调和利用资源，满足需求； 具备基本的方法论，敏锐的观察力，善于对事物的抽象，提炼，简化。同时由于架构涉及到范围广，需要能快速学习新知识，善于学习关键点，不能由于过多限于细节而影响精力分配。&lt;/p&gt;

&lt;p&gt;架构师很多时间是技术决策，需要能勇于应对变化，积极改变，敢于挑战。能够将方案落地，从解决系统的具体问题出发，能解决别人看不清的问题，也同时需要具有战略眼光，看得更远。&lt;/p&gt;

&lt;p&gt;架构是上层建筑，影响深远，所以架构师需要善于识别和消除高风险，要广泛地吸收不同的意见，头脑风暴，风险识别、评估。对于风险进行排序，对于高风险点进行原型验证，切不可纯理论的架构，做成空中楼阁。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>软件开发知行合一</title>
      <link>http://lanlingzi.cn/post/thoughts/2016/0131_unity_knowledge_action/</link>
      <pubDate>Sun, 31 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>http://lanlingzi.cn/post/thoughts/2016/0131_unity_knowledge_action/</guid>
      <description>&lt;p&gt;最近在走读团队的代码，有时实在是看不下去。不是因为他们的代码编写有很多Bugs，而是没有设计实现太复杂了。当面对众多的需求需要快速实现，没有几个人会去思考代码怎么写结构才更合理，而是在不断去搬砖垒需求。当我去咨询他们为什么要这样实现时，每个人能只能说出一，不知其二。即使自己写的代码，也不知道当初为什么这么实现。&lt;/p&gt;

&lt;p&gt;同时，我们团队中不乏有各种兴趣小组。例如学习新的技术框架，交流设计模型，讨论重构技巧、性能优化经验。而实际在操作层面上，代码却正如前面所讲，有时真的不堪入目。由于这近在看王阳明传，突然想到我们没有&lt;code&gt;知行合一&lt;/code&gt;啊。

&lt;strong&gt;知&lt;/strong&gt; ：一方面是我们对技能掌握，如程序语言知识，设计模式，框架类库等；另一面是我们对需求理解，如场景梳理，用例分析，关键指标等。
&lt;strong&gt;行&lt;/strong&gt; ：能根据掌握的知识技能，以及对需求的认识应用于项目中，能过代码转化为实际客户所需的产品。&lt;/p&gt;

&lt;p&gt;结合按王阳明的学说，做为一名合理的软件工程师，则需要格物致知，知行合一，良知和致良知。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;格物致知&lt;/strong&gt; ：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;格需求。对需求不断地格，才能知道客户真正需要什么。因为客户的提出需求时，往往是感性的，非技术化的描述，也可能是模糊不清晰的。那就需要我们不断去交流与探讨，才能明白客户的痛点，进而知行合一，指导你编码，做出满足客户真正需要的东西。&lt;/li&gt;
&lt;li&gt;格技术。软件开发会涉及到很多的知识，尤其是大型的项目。我们面对操作系统，各种框架程序，以及各种软件工程方法。我们需要不断地格，去深入探本究源，明白什么场景下，使用什么技术是最优的。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;知行合一&lt;/strong&gt; ：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;知而为行。知行合一很好理解了，简单的就是“知”和“行”统一。理论与实践想结合，一切的实践行动又必须有理论支撑。所想即所写，所写即所需。你能编写出来的代码才是真正知道的需求，你真正知道的需求你就一定能编写出来代码。&lt;/li&gt;
&lt;li&gt;行而促知。我们不断地学习与交流，本身没有什么问题。其实如果没有实践的切身体验，是难以有较深的认知的。往往是学完也说不出一个所以然。知行合一，学习必须时刻结合实践行动，这样才能真正的掌握并不断的进步。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;良知和致良知&lt;/strong&gt; ：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;良知。良知是人内心深处的心声。软件开发的良知是程序员做事的标准。显然，不断地只按需求去垒代码不是标准，能跑起来的代码也不是标准。软件开发的标准可能很多，不同的人有不同的看法。但一个团队一定要代码编写标准化，开发流程标准化。没有规矩成不了方园，标准化才能提高我们的效率。&lt;/li&gt;
&lt;li&gt;致良知。找到标准（良知），然后去做到知行合一（致良知）。如果程序的良知是优秀的代码，那致良知就是我们不断地为实现优秀的代码去努力。优秀的代码涵盖代码的可读性，可理解性，同时还需要兼顾代码的可扩展性，可维护性。不要对自己编写的代码放任不理，识别代码的坏味道，编程的过程实际是一个不断重构改进的过程。古人说“三日省吾身”，编程也需要不断地反思。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>重构已死</title>
      <link>http://lanlingzi.cn/post/technical/2016/0123_refactor_death/</link>
      <pubDate>Sat, 23 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>http://lanlingzi.cn/post/technical/2016/0123_refactor_death/</guid>
      <description>&lt;p&gt;上周在食堂吃饭，遇到同事聊起最近的系统重构，她说这一批的新员工不如13年的一批，就一个看似简单的问题也是折腾很久，重构的周期越拉越长。我作为这次的重构的特性SE，可以说也是硬着头皮上。我是越来越反感重构，尤其是涉及到多个模块的重构。在新年的聚餐上，我说我给你挖了坑，你来填坑，让我感到非常惭愧的，即又不得做这些事。&lt;/p&gt;

&lt;p&gt;在现阶段项目交付变得越来越难，一方面我们面对众多的需求，做还是不做并不是你能轻易决定的；而另一方面我们又想从架构上解决可以快速满足需求。但本质的是这几个月内，人的技能与意识没有根本性的变化。在大家没有主人翁的精神下，说来说去也是为了需求在垒代码。即使你想从代码结构上重新设计，让系统更松的耦合性，更好的扩展性。受于项目进度冲击，以及代码实现者的被动，最终也会变得让你不想回头多看一眼。

编程如果仅仅越考虑短期实现项目需求目的肯定是不好的，但想通过强制的管理手段，或重构手段来想延长它的生命周期也并一定能行得通。当同一份代码是多人开发与维护，并在领导眼中的谁有时间谁就上的话。本意可能是想通过多人的备份，或共同完成以期缩短工期。其实这种做法无疑更是加重了代码朝腐化之路上走的趋势。&lt;/p&gt;

&lt;p&gt;重构有很多的手法或方法理论，其核心都会有提到&lt;code&gt;不改变软件的外部行为&lt;/code&gt;，是对&lt;code&gt;软件内部结构&lt;/code&gt;进行修改与调整。这实际上是非常难以做到的，我们是如何去评估不改变软件的外部行为，充分的测试能保证吗？显然就我们目前的测试能力来看，这简单是非常美好的梦想。尤其是具有一些年头的代码，或者又是人员变化较频繁的代码，看上去并不清爽的代码，至少还能正常的工作，一旦重构不知会丢失多少其中通过各种手段修改出来的小功能点。&lt;/p&gt;

&lt;p&gt;今天的软件交付，可能说由于整体的需求是具有多变性，给软件开发带来不确认性。不确定就会产生怀疑和恐惧，我们经常会说，软件架构是要架构未来，不是解决当下问题。当不确定性还不算太多的时候，我们还在架构层面上来推演，整个软件系统的大致方向可以被预测，然后在此基础上不断地演化。而当不确定性实在太多的时候，对软件的要求就变成了&lt;code&gt;可丢弃&lt;/code&gt;。换句话说，你开发的所有软件，从一开始，你就应该做好很快被丢弃的准备。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;采用开源：尤其是Github让开源的推广与使用变得越来越简单，开源软件在商用软件领域成为了越来越主流。即使你开发的是非常重要的商用软件也不需要自己从头开始，自己实现并一定比开源实现的好。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;平台框架：平台软件的目的是让通用的能力重用与沉淀。业务领域更倾向于采用面向领域的DSL描述简化开发，代码量要求是越来越少。目前各种基础框架越来越成熟，基于基础构架上构建，可以在最短时间内以最少代码量做出一个符合要求的软件。并且业务层不需要过多的设计，因为大部分设计已经蕴含在框架内。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;职责单一：可以把系统拆多功能单一的服务，符合单一职责原则，做且仅做一件事。这样代码量就不会太多，也不需要频繁地添加新的功能，变化少就不不会导致不稳定，所以这样代码烂也烂不到哪里去。另一方面功能单一，在其上的工作团队成员也会很少，四五个人能搞定的代码，它的也不会因为多人的经手变得不可维护。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在面对需要快速迭代交付的项目下，软件开发变得越来越轻量化下。尤其是在微服务架构下，软件开发其实可以不需要重构，该烂的就让它烂掉。对于单个微服务或单个小的模块内的代码重构意义也变得越来越小。如果这个微服务真的到了无法满足需求情况下，那没有必要对它进行重构，重写一个就行了。所以在这样的情况下&lt;code&gt;“重构已死”&lt;/code&gt;，其实又是系统中另外一种&lt;code&gt;“重生”&lt;/code&gt;，就像人的身体一样，做换只手的手术可能影响非常地大，如果只是细胞不断地死去，新的又产生替换，你是感觉不到有什么影响。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>7秒时光</title>
      <link>http://lanlingzi.cn/post/stories/2016/0103_7s_time/</link>
      <pubDate>Sun, 03 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>http://lanlingzi.cn/post/stories/2016/0103_7s_time/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://lanlingzi.cn/images/7stime/IMG_8337.jpg&#34; alt=&#34;image1&#34; /&gt;
&lt;img src=&#34;http://lanlingzi.cn/images/7stime/IMG_8235.jpg&#34; alt=&#34;image2&#34; /&gt;&lt;/p&gt;

&lt;p&gt;三天的元旦时间很快就过去，前两天是窝在家搞我这个网站。今天怎么也得出去走走，于是老婆约上她的几位好友，说去莲塘边的罗湖5号绿道感受一下大自然。天公有点不作美，一直下着毛毛细雨，但是我们还是意识坚定，风雨无阻。当我们一行7人踏上路程，蓦然发现朦胧细雨下的水库与5号绿道，别有一番诗情画意，望着不远的仙湖与梧桐山，他们就像一幅幅山水水墨画，恨不得把她们都收入到相机中。

&lt;img src=&#34;http://lanlingzi.cn/images/7stime/IMG_8220.jpg&#34; alt=&#34;image3&#34; /&gt;
&lt;img src=&#34;http://lanlingzi.cn/images/7stime/IMG_8364.jpg&#34; alt=&#34;image4&#34; /&gt;&lt;/p&gt;

&lt;p&gt;一路上我们有说有笑，完全忘记了天气的不适。虽已是深冬，但深圳的冬天却还是花开的春天般。我们一行中有一位博学的动植物学老师，一路上的花花草草，她都能讲解得恰当时机，本是由于下雨无趣的路程，给增添了不少的知识与乐趣。不知不觉我们就到达了我们的目的地，梧桐山下的大望艺术小镇。正值中午，一路的能量消耗，也需要新的补充，她提议去她在杭州开会认识一位朋友的小店，说她家做的东西非常好吃。作为吃货的我们，自然是欣然答应。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://lanlingzi.cn/images/7stime/IMG_8365.jpg&#34; alt=&#34;image5&#34; /&gt;
&lt;img src=&#34;http://lanlingzi.cn/images/7stime/IMG_8318.jpg&#34; alt=&#34;image6&#34; /&gt;&lt;/p&gt;

&lt;p&gt;在大望艺术小镇内，七拐八拐才找到她，她仿如世外桃园，不与商业争艳。这不是一家普通的店，而是一家颇具文艺气息的休闲别院。店有一个非常诗意的名字：七秒时光。当我们推开门，经过一段门廊，映入我们眼帘是一座极具风情的别院：树，小溪，茶亭，书，钟表，留声机。一切充满了文艺，轻松的气息。而正门墙上的一段文字也深深地吸引了我：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://lanlingzi.cn/images/7stime/IMG_8366.jpg&#34; alt=&#34;image7&#34; /&gt;
&lt;img src=&#34;http://lanlingzi.cn/images/7stime/IMG_8271.jpg&#34; alt=&#34;image8&#34; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;这也是我的天涯。进，看不见幸福，退，看不见你。止于此。春便还是春，夏便还是夏。爱止于此，心也止于此，风止于秋水，我止于你。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;店名的也是别具深意，在这个繁华的世界，你我学会放下烦恼，只要拥有你，便能止于此：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;传说鱼的记忆只有七秒 七秒一过，它们就会忘记所发生的事情,每一刻都是崭新的，一点也不会疲惫，这样快乐总有理由&amp;hellip;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;是的，我们的痛苦，大多是来自我们虚无空洞的追求。愿做一条七秒鱼，安顿身心，把每一刻活出崭新。这或许是2016年元旦最大的收获。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;推荐阅读：&lt;a href=&#34;http:/book.douban.com/subject/24705311/&#34;&gt;我是一条只有七秒记忆的鱼&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>新年新目标</title>
      <link>http://lanlingzi.cn/post/stories/2016/0101_new_year/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>http://lanlingzi.cn/post/stories/2016/0101_new_year/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://img.51tietu.net/upload/www.51tietu.net/2015-1/201501030207146601.png&#34; alt=&#34;footprint&#34; /&gt;&lt;/p&gt;

&lt;p&gt;韶华易逝，往昔不再。时间已翻到2016年，在15年的12月份，忽然做了一个决定，注册了lanlingzi.cn这个域名，开始鼓励自己写写东西。原由是在15年的下半年，工作上做一个重大的调整，暮然发现自已写东西有时真让人费解。这个域名上已有的文章，是我之前在CSDN上一些记忆，以及自已电脑上留下的文档。虽然在公司也会写写技术博文，但那些更倾向于技术的细节与程序语言，对问题的思考与见解少了一些。&lt;/p&gt;

&lt;p&gt;在16年的计划目标是每个月一到两篇，争取多写些有思想，有见解的干货。经过这几天的梳理，才有了这个网站。发现写东西是一个比较费时费脑力的事儿，甚至比写起代码来还难。苦于自己的文思，文笔，写完之后，有时连自己都看不下去，一堆的错别字，语句不通顺。有时，脑子中是飞快地转，好似有千言万语，下笔时却不知从何写起。
&lt;/p&gt;

&lt;p&gt;不管怎么样，我已经开始写了，我也开始享受写作的过程，整理文字，就是整理自己的思绪。可以把零星的，模糊的想法，通过这个网络串起来，记录下来。我不求有人会去欣赏，孤芳自赏也是一种自娱。也许，每每自己回头阅读自己的文字，也是阅读自己的回忆。有会也许会觉得自己一些想法，见解，观点是那么的幼稚、怪诞，可笑。这或许也是自我的一种成长历程吧。&lt;/p&gt;

&lt;p&gt;16年不再年轻，而技术却是日新月异，既然今年放弃了带团队，专走技术这一线，那就坚持吧。16年加油，技术不会随着年轮越走越窄，无论是编写代码，还是做设计方案，只要能沉下心来，专心专意去付出，就会又有收获。&lt;/p&gt;

&lt;p&gt;15年在思想上虽有一些波折，但整体还是圆满，要感谢的人太多太多。感谢家人的理解与支持，感谢领导与同事的器重，感谢大家的宽容与谅解。那些往事，那些经历，一路上有你们的支持，才能有我每年的成长。学会感恩，让自己的内心更加的平静，更加的强大。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;16年加油，让生活更美好！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>参加ArchSummit北京站感受</title>
      <link>http://lanlingzi.cn/post/technical/2015/1227_bj_archsummit/</link>
      <pubDate>Sun, 27 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>http://lanlingzi.cn/post/technical/2015/1227_bj_archsummit/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://q.infoqstatic.com/ASSZ2015/LOGO/AS-LOGO358x146.png&#34; alt=&#34;ArchSummit&#34; /&gt;&lt;/p&gt;

&lt;p&gt;参加ArchSummit北京站已有一周时间，一直没有时间来梳理一下。整体来说，这次的北京之行，不是很满意，可能是这类会议听多的原因，感觉ArchSummit的质量是越来越差了，没有什么新鲜感，觉得不值那6K的价格。&lt;/p&gt;

&lt;h2 id=&#34;组织不足&#34;&gt;组织不足&lt;/h2&gt;

&lt;p&gt;12月份的北京已是非常的干冷，可能由于我在南方呆久了，一到北京是极其地不适应，在北京三天多的时间，嘴唇开裂，到现在还没有完全好干净。离开北京的那一天，正好又感受了一下北京正宗的霾，帝都的人们活得真不容易啊。

为什么说ArchSummit组织不足呢？InfoQ也算是组织过多次大型会议的公司，但这一次比我之前参加InfoQ组织的任何会议都差，更无法与阿里组织的云栖会议相比。一个是以组织会议赚钱，一个是以个会议来打造生态。这次的ArchSummit是在北京国际个会议中心举行，每个分会场我都差不多的参加过，明显感觉组织不足:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;每个分会场演讲时，大门紧闭，空间质量非常的差，又没有充足的通风设备，感觉非常的窒息。&lt;/li&gt;
&lt;li&gt;工作人员能力不行，第一天下午，有几个分会议室由于投影没有准备好，拖时半个多小时，也不见中途主持人来了说一声，最后连声道歉都没有。&lt;/li&gt;
&lt;li&gt;几个分会场的投影效果差，灰蒙蒙的看不清楚。&lt;/li&gt;
&lt;li&gt;连个矿泉水瓶上都是广告，并且不是每个位置都摆放好水，而是需要自己去指定位置去拿。有的分会场甚于连矿泉水都没有见到，准备的份数太少，6K的价格连个水都喝不到。&lt;/li&gt;
&lt;li&gt;就餐地方太小（又是自助餐），效率低下，大量的人员挤在走廊上，我是差不多等了30多分钟才能进餐厅吃饭。大量的人员挤在一起存在安全风险。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;两天的ArchSummit大会日程比较紧凑，再加上大多数时候有六个专题在并行，因此每个人能够真正去听的课程不会太多。我们也是只能选择地去听，但是每个演讲介绍不足，有些演讲名字高大上，听了之后，感觉有点上当，部分讲师存在水分，这里就不直说了。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;不过，参加ArchSummit大会，还是听到一些业内公司的技术分享，尤其是互联网企业，在应用新技术方面还是比较超前的。相对我们电信行业来说，我们遇到的问题有些是相似的，甚至部分问题的解决办法也与我们曾经想过的一些方案类似，只是他们早已经落地并且做到极致了。有很多东西对我们值得参考，可以说从开源使用、技术形态，运作方式，远远走在我们的前面了。&lt;/p&gt;

&lt;h2 id=&#34;paas平台&#34;&gt;PaaS平台&lt;/h2&gt;

&lt;p&gt;目前稍具规模的互联网公司，都会自建数据中心。而互联网的业务又有如下特点：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;业务需要快速上线，唯快不破&lt;/li&gt;
&lt;li&gt;业务形态众多，迭代周期快&lt;/li&gt;
&lt;li&gt;数据处理量大，海量请求和高并发的挑战&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;支撑业务的发布，上线，运维，都需要对业务应用的全生命周期管理，各个公司都有一套平台，他们或多或少都能称得上内部的PaaS平台。而PaaS平台核心：&lt;/p&gt;

&lt;h3 id=&#34;分布式框架&#34;&gt;分布式框架&lt;/h3&gt;

&lt;p&gt;首先是《蚂蚁金服金融级PaaS平台构建之道》分享，阿里在国内技术一直算是走到前列。这次带来的演讲，蚂蚁金服的分布式服务注册中心（DSR），与阿里其它系的Dubbo，HSF都差不多。他们的目标都要解决应用服务化后，服务注册发现问题，可以说是未来PaaS平台中，服务注册发现将成来PaaS的核心中的核心。&lt;/p&gt;

&lt;p&gt;后一场听了《主流容器SDN技术与微服务架构实践》，来自七牛的分享。虽然演讲的内容是容器的SDN技术（算不上大范围的SDN），也同时点到微服务架构。虽然他们所讲的容器方案都说是自研的，但整体上感觉与K8S的设计是相似，甚至像Pod之类的概念来也是借鉴来的。在容器环境下的同时也要解决分布式的服务发现问题，他们采用是DNS机制。服务路由上支持L4与L7的负载均衡，对业务无侵入。基于安全组的服务Discovery，虽然没听太明白，感觉跟K8S的Proxy机制是差不多的。&lt;/p&gt;

&lt;h3 id=&#34;中间件服务&#34;&gt;中间件服务&lt;/h3&gt;

&lt;p&gt;在《蚂蚁金服金融级PaaS平台构建之道》中初步介绍了分布式消息(DMS)、分布式数据源（DDS），分布式事务（DTS）的一些使用场景与技术特点。在云环境下，中间件服务必不可少，让业务应用只关注自己的业务逻辑。中间件服务要面对的是一个复杂、不断变化的计算环境。抽象出业务的公共能力服务化。使用中间件服务，可以简化业务应用在一些通用技术的成本，如数据一致性，安全控制，高性能，可靠性等。而中间件技术正在呈现出业务化、服务化、一体化的趋势发展。高可用性，自管理性，业务适应性是当前中间件服务面临的挑战。&lt;/p&gt;

&lt;h3 id=&#34;弹性扩展&#34;&gt;弹性扩展&lt;/h3&gt;

&lt;p&gt;在云计算中，引入虚拟化技术，采用弹性伸缩是老生常谈了，一键式按需弹性，基于性能采集的自动弹性。听了《微众银行基于自主可控技术的分布式架构实践》，给我对弹性带了新的思考。互联网+的应用是：海量用户，海量交易，海量数据。这要求对系统在架构设计上充分考虑容量的扩展性，性能的扩展性。&lt;/p&gt;

&lt;p&gt;微众的架构特点是分布式松耦合架构+一主两从节点强制同步的架构。在分布式松耦合架构是按客户群来水平分割，一个节点上涵盖多个客户业务。分布式多节点是分散风险，如果有节点受损，也是部分客户有影响。而每个节点上又采用一主两从节点强制同步，来提高整个系统的冗余。整个系统以客户为单元可控分布，将客户量、交易频繁度与系统负载之间的关系解耦。随着客户量增加或客户交易频繁度的增加,系统负载也会随着增加：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;横向扩展(Scale Out)解决用户量增加&lt;/li&gt;
&lt;li&gt;纵向扩展(Scale Up)解决交易频繁度增加&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;并且严格要求，横向扩展只能解决用户量问题，不能通过纵向扩展来解决用户量问题，反之亦然。&lt;/p&gt;

&lt;h3 id=&#34;容灾备份&#34;&gt;容灾备份&lt;/h3&gt;

&lt;p&gt;云计算环境下，容灾备份也是需要重点考虑的，容灾设计强调的是系统对外界环境影响具备快速响应能力，尤其是当发生灾难性事件并对IDC节点产生影响时，能够具备节点级别的快速恢复能力，保障系统的持续可用。像微众介绍IDC2.0中提到的：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;数据库三中心集群化部署&lt;/li&gt;
&lt;li&gt;三数据副本强同步&lt;/li&gt;
&lt;li&gt;应用多中心多活部署&lt;/li&gt;
&lt;li&gt;应用多中心多实例多活部署&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;蚂蚁金服金服提到的：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;两地三中心&lt;/li&gt;
&lt;li&gt;异地多活&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;支付宝有一个专题《支付宝的高可用与容灾架构演进》，我觉得有意思的是其中的单元化与容灾。单元化应该是微服务化中一种具体运用吧。什么是支付宝的单元化：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;核心业务,核心剥离：数据按照UserID拆分,多机房部署,调用封闭,部分数据,不共享&lt;/li&gt;
&lt;li&gt;非核心业务,长尾独立：不能按照UID拆分，核心不依赖长尾&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;单元化的实现思路：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;水平拆：交易、支付、账务等,每个单元只有部分数据&lt;/li&gt;
&lt;li&gt;上层单元化改造：从DB层往上延伸水平拆分概念,包括应用层到入口层&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在容灾同步上，是基于单元化的多中心同步，这已打破我们对原有容灾备份的认识，基于单元化的容灾同步，可以细粒度的控制，解决数据一致性和时效性问题：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;基于DB同步的数据复制：延时非敏感业务的异地复制方案;部分业务数据,可忍受3s时效性延迟(比如大部分的配置 数据)&lt;/li&gt;
&lt;li&gt;基于消息系统的数据复制：对于延时非常敏感的业务,更低延时的实现方案;上层基于应用进行复制,减少延时。底层 DB主备同步同时进行&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;高效运维&#34;&gt;高效运维&lt;/h3&gt;

&lt;p&gt;开发团队快节奏的版本迭代，以及服务的快速上线的要求，驱动着PaaS平台要提供出更为高效的运维服务。高效运维的思路是建立以 &lt;strong&gt;应用服务&lt;/strong&gt; 为核心的管理标准体系。把运维能力服务化(API)，使运维的能力无处不在。高效运维，综合几个公司的介绍主要需要如下几个系统设计：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;发布系统：负责应用服务的上线，应用服务的资源管理，扩容，权限管理，支持Beta发布，灰度升级。&lt;/li&gt;
&lt;li&gt;监控系统：通用+自定义监控配置,运维+开发可以时刻关注自己的服务状态和质量。&lt;/li&gt;
&lt;li&gt;全链路系统：复杂的分布式系统，一次点击，几十次的RPC调，需要全链路跟踪，出了问题,如何快 速定位到故障点。&lt;/li&gt;
&lt;li&gt;限流与降级：限流,Web层,防止被流量打垮；降级,App层(服务化),保障核心应用&lt;/li&gt;
&lt;li&gt;容量评估：基于全链路的压测手段、数据分布的模拟方法、关键场景调用量预估&lt;/li&gt;
&lt;li&gt;蓝绿发布：即多站点的灰度。具体操作流程：切流（将待发布机房流量切走）-&amp;gt; 机房发布（待发布机房全应用并行发布）-&amp;gt; 引流验证 （逐步按规则引流至100%）-&amp;gt;
  流量交换（将全部流程切换到已发布机房）-&amp;gt; 机房发布（另一个机房全应用并行发布）-&amp;gt; 分流还流（分流规则还原，两机房各50%）&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;服务化&#34;&gt;服务化&lt;/h2&gt;

&lt;p&gt;今年IT界是对服务化异常的火爆，系统的稳定和流畅依赖好的应用架构，服务化治理如何规划和落地，是众多厂商系统的痛点。&lt;/p&gt;

&lt;p&gt;首先是来自1号店订单系统对SOA化的分享，SOA是一种架构模式,是设计原则,不是技术规范。狭义的SOA：Service化， 标准化、模块化、组件化。广义的SOA：模式、原则、思想。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Service化：1）分层结构，基础Service不含业务逻辑,只封装基本的数据操作。业务(聚合)Service封装业务逻辑甚至是全部的业务逻辑。2）Service层次调用，上层可以调用下层、下层不可调用上层、同层间可互相调用，调用链长度不超过3级、不循环调用。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;服务粒度划分：1）迷你裙定律。2）细粒度的服务(fine-grained)提供相对较小的功 能单元,或交换少量的数据。细粒度的服务使服务更容易被组装。3）粗粒度的服务(coarse-grained)则是在一个抽象 的接口中封装了独立的业务/技术能力,减少服务请求交互的次数。粗粒度的服务适合更广泛的需求。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;再次是来自Twitter的服务化思路分享：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;单体：牵一发而动全身&lt;/li&gt;
&lt;li&gt;分拆：把单体分成多个模块&lt;/li&gt;
&lt;li&gt;服务化：把模块按功能服务化&lt;/li&gt;
&lt;li&gt;平台化：模块功能中部分服务化为通用服务，通用服务提供一般化服务，平台化&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;docker&#34;&gt;Docker&lt;/h2&gt;

&lt;p&gt;在不断寻求性能更好、速度更快、成本更低的云计算核心技术中，容器技术是目前最吸引人注意的技术之一。尽管除去效率、速度和成本等方面的优势以外，容器技术还存在一些安全上需要斟酌的问题，但是其实际表现仍然得到了肯定。还是借用其中的分享内容来说明一下Docker。&lt;/p&gt;

&lt;p&gt;在遇到Docker之前：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;混乱的环境：Java, Golang, Ruby&lt;/li&gt;
&lt;li&gt;混乱的配置：Upstart, authorized_keys, dependency, 各种脚本&lt;/li&gt;
&lt;li&gt;混乱的监控：ErrorReporter, Message&lt;/li&gt;
&lt;li&gt;混乱的资源：计算资源与预估不匹配&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;导致的结果是：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;环境不匹配导致,测试跟生产不一致&lt;/li&gt;
&lt;li&gt;配置混乱导致事故频发&lt;/li&gt;
&lt;li&gt;监控不统一导致运维难上加难&lt;/li&gt;
&lt;li&gt;资源效率低导致成本很高却达不到相应目标&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;而Docker具有如下特点：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;构建快：应用+运行环境 = 镜像&lt;/li&gt;
&lt;li&gt;启动快：容器相比于虚机,更轻量级&lt;/li&gt;
&lt;li&gt;迁移快：应用以容器的方式标准化交付,标 准化运行&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;去年Docker主要是在吵作概念，而今年很多的互联网厂商已在使用Docker，本次Docker中都分享各自针对Docker的一些定制化修改及踩过的各种坑，所遇到的困难和走过的弯路。&lt;/p&gt;

&lt;p&gt;当然这些坑不是阻当我们不使用Docker的理由，Dockerk只是一个系统架构优化的承载体。来自Coding.net的分享最后总结的比较好，Docker会对软件，流程带入变革与影响，是否采用Docker，系统都需要关注如下三个方面，只是Docker让你不得不关注他们：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;软件架构的升级：微服务、无状态、数据执行分离&lt;/li&gt;
&lt;li&gt;研发体系、环境管理理念的升级：容器化、代码化、自动化&lt;/li&gt;
&lt;li&gt;资源管理理念的升级：Pet vs Cattle，多留点富余量，迁移能力比压榨能力更重要&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>参加CNUTCon全球容器大会感受</title>
      <link>http://lanlingzi.cn/post/technical/2015/0902_bj_cnutcon/</link>
      <pubDate>Wed, 02 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>http://lanlingzi.cn/post/technical/2015/0902_bj_cnutcon/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://lanlingzi.cn/images/docker/cnut.png&#34; alt=&#34;cnutcon&#34; /&gt;&lt;/p&gt;

&lt;p&gt;由于最近一直在从事Docker相关的工作，所以有机会参与这次的&lt;a href=&#34;http://cnutcon.com/&#34;&gt;CNUTCon全球容器大会&lt;/a&gt;。名字比较“高格”，虽有少量的外国人分享，大部分还是中国的互联网企业在宣传，忽悠。除去这些，整体来说这次大会还是非常不错的，门票也不算太贵，目前看来应该还是值的。我司还是这次大会的钻石赞助商，也说明我们在容器这一块的发力程度。&lt;/p&gt;

&lt;h2 id=&#34;整体感受&#34;&gt;整体感受&lt;/h2&gt;

&lt;p&gt;Docker是这这两年成长最快的技术，受到资本市场的热捧。Docker技术以势不可挡地席卷全球。参考这次大会，整体感受是：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Docker已不再是概念，已进入互联网企业的实际生产环境中&lt;/li&gt;
&lt;li&gt;Docker的创业公司多，有远见的想在这次的浪潮中分享红利&lt;/li&gt;
&lt;li&gt;大公司借Docker东风，亦想在云计算领域中拿下更多话语权&lt;/li&gt;

&lt;li&gt;&lt;p&gt;容器技术处于战国群雄，完整的生态还比较混乱技术栈不成熟
&lt;/p&gt;

&lt;h2 id=&#34;看国外&#34;&gt;看国外&lt;/h2&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这次的CNUTCon，居然没有请求正牌的Docker公司，而是请到他的死对头CoreOS，其次还有RedHat，Google，以及Rancher。&lt;/p&gt;

&lt;p&gt;第一天的首场分享是来自RedHat副总裁，印度英语原来在公司就听到不少的印度同事，虽说听不太清楚，却有一股莫名的亲切感。由于是副总裁人物，讲的东西也是太High了，主要是分享OpenShift为什么要使用Docker，以及对Docker的认识。可以说在技术上空洞无物，对我来说“然并卵”。过程中的演示貌似险出了岔子。总之，他是来宣传OpenShift。&lt;/p&gt;

&lt;p&gt;其次是来自CoreOS产品负责人分享，不过也没有什么干货，可能他对国内Docker技术应用程度还不太了解，还停留在宣传概念阶段。主要讲了两组项目：一个是Chubby+Borg，之后是etcd+k8s。并分别对比了Chubby以及etcd，最后是基于etcd的使用演示，&lt;a href=&#34;https://github.com/kelseyhightower/cnutcon-2015&#34;&gt;Demo&lt;/a&gt;放到了Git上。只能说这个Demo是对etcd相当的入门级。总之，他是来宣传etcd。&lt;/p&gt;

&lt;p&gt;可以说，第一天的两场分享，其实跟Docker，或容器技术关联不是很大，看来InfoQ请错人了。&lt;/p&gt;

&lt;p&gt;第二天的来自国外的分享，有Google的华人美女工程师分享了“Kubernetes和Borg的设计哲学”。这一场还是不错的，虽也是比较High Level的介绍，不过让我这种屌丝有机会了解一下Google十多年前就开始的容器管理理论，感觉是真是简单实用：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;declarative &amp;gt; imperative&lt;/li&gt;
&lt;li&gt;Control loops&lt;/li&gt;
&lt;li&gt;Simple &amp;gt; Complex&lt;/li&gt;
&lt;li&gt;Modularity&lt;/li&gt;
&lt;li&gt;Legacy compatible&lt;/li&gt;
&lt;li&gt;Network-centric&lt;/li&gt;
&lt;li&gt;No grouping&lt;/li&gt;
&lt;li&gt;Cattle &amp;gt; Pets&lt;/li&gt;
&lt;li&gt;Open &amp;gt; Closed&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;再次是来自Rancher Labs的秦总分享的“Rancher Labs 企业级私有容器服务平台解决方案分析”，并且他还跟我一起在现场的另外一个同事是之前的同事。干货比较多，演讲者虽说不懂技术，但Rancher给我带来是思维，尤其是后面介绍的“RancherOS”，在会场没有听太明白什么是“Dockerized OS”，后面查询一些资料，发现它除了内核之后，PID1就是Docker，其它的系统服务都Dockerized，并且在发行包的大小做到了极致，只有20M。能把Linux的系统服务通过Docker容器来管理，不得不说这这一项不错的创意，如果能实现应用在生产中，这不知又会对Linux产生什么样的深远影响。&lt;/p&gt;

&lt;h3 id=&#34;小结&#34;&gt;小结&lt;/h3&gt;

&lt;p&gt;由于只有四场，OpenShift与CoreOS是来做广告，我也曾经想在OpenShift免费空间上搭建Go的Web环境，发现真TMD的难用，OpenShift又想借Docker打个翻身仗，PaaS本身的体验不解决，Docker也“然并卵“。而CoreOS在容器中扮演着是一个搅局者，对防止Docker一家独大是益的，但它的RKT差不多落后Docker一年半，但是ETCD还是不错的。&lt;/p&gt;

&lt;p&gt;Google是老牌的容器使用者，他在这一这方面的经验可能是最具有发言权的。他也乘着Docker之势，迅速摧出K8S。并极力去构建Container Orchestration，ContainerInfrastructure，ContainerManagement的生态。虽说K8S目前还是很成熟，但在未来在容器界K8S必定举足轻重，甚于可能是Container Orchestration的事实领导者。&lt;/p&gt;

&lt;h2 id=&#34;看国内&#34;&gt;看国内&lt;/h2&gt;

&lt;p&gt;在国内，自然少不了BAT，以及后之秀京东。商业的成功驱动他们在技术上必定走在前列。第一天下午几场都使来自大厂的分享。&lt;/p&gt;

&lt;p&gt;首位是京东云平台的分享，京东最初的希望是通过一个平台，将物理机，虚拟机，容器，三种资源统一管理，随后的演化中，容器逐渐成为了一等公民。一种是容器直接在VM上，一种是让VM看起来像容器。开始是采用“胖容器”的模式，这一思路与我们的不谋而合，首先是要把容器使用起来，不管它是容器还是虚拟机；再次是业务的纯容器化。如何把容器中融合到已有系统中是目前大家遇到的最大挑战。&lt;/p&gt;

&lt;p&gt;其次是来自大众点评的分享，同样对容器的使用，也是使得容器看起来像虚拟机。重点介绍了在网络方面的经验，如通过新创建的br0网桥与eth连接，使得docker 容器可以有自己独立的IP。最后也分享在使用容器过程中一些坑。&lt;/p&gt;

&lt;p&gt;再次是阿里百川的TAE Docker全架构分享，干货是相当的多，信息量是相当的大的。Docker只是TAE中非常小的一部分，目前还是把Docker当做工具来用，重要介绍不是为了Docker而Docker，Docker并不等于容器。在实践的过程中，Docker的优势，基于Docker的全架构的PaaS平台，才兼具IaaS的灵活性和PaaS的易运维性。其实也说明Docker技术拉低了云平台的技术门槛，像原有的IaaS只有大投入才能玩得起，而Docker让你使用云资源变得更轻捷。&lt;/p&gt;

&lt;p&gt;再次是也来自腾讯的在游戏上，Docker实践：现状、经验及展望。其中有意义是在网络上的改造，目前Docker在网络上是很弱的。像点评一样，不得不面对网络打通的问题。一般来说，游戏业务的生命周期长短不一，这需要弹性的资源管理和交付。相比于虚拟机，容器更加轻量，效率更高，资源的交付和销毁更快。可能说像Docker的应用可对针对游戏业务提升资源的利用率，降低运营成本，也是Docker的魅力之一。&lt;/p&gt;

&lt;p&gt;第二天是来自百度的分享，感觉百度对于容器的实践比较牛逼，在docker没出来之前，他们就学Google都着眼于容器技术了。对于大企业来说，在资源调度上面对的困难是如何错峰填谷，如何将服务与机器解耦、预算调度，资源精细分配，统一池化，如何解决混合部署带来问题。而基于容器技术构建的Matrix平台，直接是在cgroup （划出一个资源框）namespace（内部的话只需要部分）的基础上定制操作。再通过agent来把这些所谓的“容器”启动起来，架构上有统一的container操作接口。其次是百度对于容器的安全性也有了很多实践，其实所说的安全性就是让容器上的代码不会跳到主机上去，让host上的代码不会逃逸出去。分享的内容很多，整体来说，百度应该是在国内互联网企业研究容器技术比较深的，而不仅仅是Docker的简单使用。&lt;/p&gt;

&lt;h3 id=&#34;小结-1&#34;&gt;小结&lt;/h3&gt;

&lt;p&gt;大公司的docker实践更有发言权，实际上他们对于docker的实践才是真正切合实际的，在实践过程中也是对于原有业务的相关性迁就比较多，不是为了容器而容器。各个公司解决方案，定制的过程，玩法，基本上是各有各的招。如遇到的网络的改进，渐进式的使用，某种程度上把docker当成虚拟机的来用。究其原因，还是因为业务解耦，平台自由，容器化的过程并没有那么简单。&lt;/p&gt;

&lt;h2 id=&#34;看编排调度&#34;&gt;看编排调度&lt;/h2&gt;

&lt;p&gt;这次会议上有几个都在分享K8S，Swarn的技术。由于一直关注K8S，我只是选择都听了一下。谈到K8S，大家都要说说mesos swarm，对比一番。后也听了我司的线超博对Swarn分享。整体来说，像K8s这种，还是理念较新的技术，大公司没有看到一个在采用，一是它出来太新了，二是在性能及稳定上存在问题。只有新创业的一些公司，赶上打着这些的旗号。一些散户玩玩还行，但对一企业级的业务，如何彻底地服务化，如何灵活地容器调度，原有业务如何契合，明显还有很长的路要走。而swarm更是不适合在生产环境中使用，并且docker公司想一家独食的原因，又要在编排上分一怀羹，目前大家都不看好它。另外swarm在设计上缺乏集群管理的视角，也难以在生产环境中发挥调度的优势。个人认为K8S在编排调度上会完胜Swarn。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>软件开发中缺陷管理</title>
      <link>http://lanlingzi.cn/post/thoughts/2014/0901_soft_dev_dt_trace/</link>
      <pubDate>Mon, 01 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>http://lanlingzi.cn/post/thoughts/2014/0901_soft_dev_dt_trace/</guid>
      <description>&lt;p&gt;在我司，我发现大家很擅长把一个东西到极致，但极致可能是过犹不及了，例如测试并不是发现越来越多的Bug就越好，如果把很多的时间消耗到一些不重要的点，反而不可取，软件只要你去测试，怎能发现一些Bug，如要面对这些就非常纠结。作一名开发，说这话肯定会被一批的测试人员拍砖死了。在此表达一下不同的观点，不一定正确，请轻拍。&lt;/p&gt;

&lt;p&gt;在我司的各种度量工具很牛X，缺陷跟踪分析每个迭代阶段就会做，形成一些报告。对于软件质量来说，统计所有过去的Bugs是没有多大用的，相对来说，一些更实际的工作可能更重要，在Douglas Hubbard的《How to Measure Anything: Finding the Value of Intangibles in Business》(如何衡量任何事：寻找商业无形资产的价值)中，把这种现象解释成衡量倒置(Measurement Inversion)：衡量一个东西的经济价值与它通常所受到的关注度多少成反比。
&lt;/p&gt;

&lt;p&gt;一种较有说服力的观点是缺陷跟踪方便人们发现缺陷的趋势，对流程的改变很有一些效果，如提前做些缺陷预防。对于管理者来说，他们需要缺陷跟踪报告可能了解软件的质量状况。但可能实际却不是这样的，单单根据DI值来判断软件质量，这跟由湿度来判断天气是否好坏一样不太靠谱。&lt;/p&gt;

&lt;p&gt;质量是什么，尤其是软件的质量是什么？是看软件的缺陷率吗？比如我现在比较喜欢荣耀手机，我会关注荣耀手机DTS中的单有多少吗？在消费者的眼中，质量就是对他有价值的东西。如果客户是快乐的，存在一些漏洞也是问题不大的。如果客户抱怨，跟有多少Bugs是无关的。&lt;/p&gt;

&lt;p&gt;前几年在摧广敏捷时，提到做刚刚好的系统，也提到了零缺陷：符合已确定之要求，一次做对。第一次把正确的事情做正确，包含了三个层次：正确的事、正确地做事和第一次做正确，三个因素缺一不可：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;正确的事：辨认出客户的真正需求，从而制定出相应的战略。&lt;/li&gt;
&lt;li&gt;正确地做事：软件开发中所必需的全部活动都符合客户和市场的客观要求。&lt;/li&gt;
&lt;li&gt;第一次做正确：防止不符合要求的成本产生，从而降低质量成本，提高效率。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;什么是软件的缺陷，在软件程序中存在任何一种破坏正常运行能力的问题，都可能叫作缺陷，Bugs。但生产软件的最终目的是为了满足客户需求，如果以客户需求作为判断软件质量的标准，软件的缺陷可以包括如下几个因素：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;软件未达到客户需求的功能与性能要求；&lt;/li&gt;
&lt;li&gt;软件出现客户需求不能容忍的错误；&lt;/li&gt;
&lt;li&gt;软件的使用未能符合客户的习惯或工作环境。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;软件测试其实并不只是要发现问题，如果我们进行非常变态的测试，的的确确能发现很多的问题，但是有可能此类问题根本不可能出现，或是在软件生命周期内也永远不会出现，没有这么复杂的使用场景。在做异常测试，虽然一定要以发现缺陷的心态挖掘测试，但也不应该是一种无所欲为的测试。还好，公司已积累了不少的故障模式库供参考分析。但是像可服务性，可维护性，易用性应该做到什么样的程度却在实际项目操作中很难把握。任何缺陷的修改都是有成本的，一旦控制不好，可能把有限的精力都浪费在不重要的点了，这也是开篇所说的过犹不及。&lt;/p&gt;

&lt;p&gt;测试人员认为某种情况是缺陷，但开发人员认为又不是，而现实就是所争议的情形在需求中也没有明确地描述。公说公有理，婆说婆有理，说不清，道不明的。开发与测试的争执由此开始，矛盾也由此产生，不和谐的气氛由此理下种子。出的原因可能有多种：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;需求澄清不清，需求描述太过于简单，离最终的客户又远。&lt;/li&gt;
&lt;li&gt;对于原始需求没有进行评审，整理，并书面化归档。其实需求文档也要测试验证的。&lt;/li&gt;
&lt;li&gt;开发与测试存在理解上的偏差；&lt;/li&gt;
&lt;li&gt;需求本身的定义存在二义性。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;面对这种问题，无论开发与测试人员需要知道：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;要知道任何的争论解决不了问题，争论不要存在个人感情色彩(其实这个很难做到)；&lt;/li&gt;
&lt;li&gt;出现问题，首先从自身找问题，有时往往是因为我们的简单思维导致。&lt;/li&gt;
&lt;li&gt;人非圣贤，有错就改，并不失面子。讨论对事不对人。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;可能在很多的部门，把缺陷做为开发或测试的绩效指标，这种简单而粗暴管理，直接的结果就是让开发和测试从此不和谐，彼此斗角。要相信办法总是比问题多，每一个问题都有至少一个解决的办法，愿开发与测试都能朝同一个目标，把软件做到刚刚好，事成人爽。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>软件开发与中医理论</title>
      <link>http://lanlingzi.cn/post/thoughts/2014/0804_soft_dev_tcm_theory/</link>
      <pubDate>Mon, 04 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>http://lanlingzi.cn/post/thoughts/2014/0804_soft_dev_tcm_theory/</guid>
      <description>&lt;p&gt;最近一段时间，看了些的版本迭代开发数据。有CI中QDI，FindBugs，重复率，复杂圈度；也有迭代的Story实现率，IR分解率，DI值;也有测试用例，覆盖率，执行时长，入门用例比等。反正各种度量数据多得是，从各个方面来反馈项目的质量。俗话说：有人的地方就有江湖。有江湖的地方就有纷争。有度量数据就有晒马排名，有排名的地方就有政治任务。我们的流程辅助度量工具多了，但这些真能带动我们的质量上去了吗？&lt;/p&gt;

&lt;p&gt;小儿已一岁多，现在回顾他做的一些体检。前三个月每月一次体检，一岁之前每3个月一次，一岁之后是每6个月一次。体检的项目有称体重、量身高、量头围、量胸围、验视力、测听力、检查动作发育、口腔检查、评价智能发育、验血、骨骼检查、心肺与心率检查、大便和血红蛋白。体检医生一上来就是开各个体检单，采用是西医的方式，看指标数据，再评测，体检应该是医院最好的生财路之一。个人也明白，正如我妈说的，我小时候哪有什么体检，也不是好好的吗？现在带小孩去体检，也是图个安心，提早预防。

那说这些跟软件开发有什么关系？西医是基于实验科学，从实验走向临床，再到应用，它关注对外界变化的认知，比如发现了细菌，就有了抗生素；发现了病毒，就有了疫苗；发明了人工心脏，就可以做植入心脏。西医的研究对象是外界。&lt;strong&gt;强调对症下药，看的是病&lt;/strong&gt;。而中医以阴阳五行为基础，将人体看到气，形，神的统一。聚焦于人本身，就是人的经络，阴阳，五行等。通过中药、针灸、推拿、按摩、食疗、拔罐等多种手段来达到人体的阴阳调和而康复。&lt;strong&gt;强调调和平衡，看的是人&lt;/strong&gt;。西医通过相同的病因数据，药物使用可能复制到不同的人。而中医需要通过医生的非常经验，开出不同的药方。所以年纪越老的中医越是历害。&lt;/p&gt;

&lt;p&gt;现在的软件工程，也似乎像西医一样，试图通过固化流程，工程手段，指标数据来统一所有项目的开发。典型的是CMM，它关注项目本身，往往忽略了项目中的人。一个C版本三个月，我们个人并没有在这短短的三个月里边发生什么实质性的变化。一个本来连计划变更都要审批，还要被QA严格审计的受控团队，有时又变成一个居然可以什么都自己估算，和中途临时领取需求任务的自组织的团队，不可不谓一个相当疯狂的举动。最后项目管控就看是各种指标数据，个中变化指标能看到什么呢？即使各种指标细化，能真实的反应项目的实情吗，这要大大地打个问号了。也有人会说，数据好的项目并不一定好，但数据差的项目一定是不好。好吧，我认这一条。&lt;/p&gt;

&lt;p&gt;外界的敏捷开发，应该是强调项目中人的本身吧，快速适合各种变化。管理以人为本，时刻进行相应的调整，尽可能地发挥个体的能力。一个被各种指标数据盯着的团队能放下这些，快速适合变化，快速响应客户的需求吗？软件的开发过程也不可能固定不变，因人而异，因项目而异，一两种软件工程学能搞定所有的项目吗？&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>做一名好的开发人员</title>
      <link>http://lanlingzi.cn/post/thoughts/2014/0729_better_developer/</link>
      <pubDate>Tue, 29 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>http://lanlingzi.cn/post/thoughts/2014/0729_better_developer/</guid>
      <description>&lt;p&gt;我在上一次的新员工交流会议上，问新员工对全栈工程师了解不，我们的目标是成为一名全栈工作师，而不是做一名只会写代码的码工。最近遇到一些不开心的事，可能是在华为呆久了，发现到底都要会学扯皮。而我性情不太喜欢做一些自认为这些是无意义的事情。虽然有前辈告诉我，扯皮可能的效果会让你少加班几个月。说着说着，有点偏了，扯皮其实是沟通成本。项目越大，沟通成本越高。带个项目的人都会意识到，项目中的人力是1+1&amp;lt;2的，人越多效率越低。因为沟通是需要成本的，不同技术的人各说各话，前端和后端是一定会掐架的。每个人都会为自己的利益而战，毫不为已的人是不存在的。&lt;/p&gt;

&lt;p&gt;减少沟通成本，我们需要全栈工程师，因为各种技术都懂，胸有成竹，自己就全做了。即使是在团队协作中，与不同技术人员的沟通也会容易得多。懂你的，你懂的，相互理解，也就少了很多的时间在扯。

那什么是全栈工程师：通俗地讲，掌握多种技能，并能利用多种技能独立完成产品的人。打外比方，全栈工程师就是一个能独立盖一幢10层小洋楼的人，而普通工程师，则是可以和一群人盖一幢摩天大楼的人。较搞地讲，全栈工程师=**丝战斗机=系统+网络+研发+DBA+架构+安全=没女朋友/没男朋友，拿一份工资做三份事情，公司的奋斗者，其它人眼中的牛人，傻X。有人说了，你再牛X，你懂五种技术，你能干五个人的活吗？全栈工程师并不是说一个人能干几个人的活，而是要从多个方面来看这个问题。&lt;/p&gt;

&lt;p&gt;我们遇到了什么问题？产品在报怨平台；开发在报怨SE没有搞清需求，规格写得不清不楚，不了解系统实现；测试在报怨开发，问题太多，Story写不好，自测试不充分；开发在报怨测试，不了解系统，机械提单，单的质量低，场景不符合业务。听多报怨，人也会变成急躁不安。心平气和，放下争端，谁都想开心上班，开心下班。报怨也是解决不了问题，反而是有摧卸责任之嫌。&lt;/p&gt;

&lt;p&gt;那在华为，全栈工程师能解决上面的问题吗？不能！首先，在华为，细化的分工很难培养出全栈工程师，那你还提全栈工程师有什么用。一名的好的开发者，能缓和一些项目中的扯皮矛盾。好的开发者，即使不是全栈，也要融会贯通多种技术。我从来不认为一个只专精一种技术的人有可能成为好的开发者。从广度和深度的组合看，我认为好的开发者大概有两种类型：&lt;strong&gt;1)手术刀;2)代码专家(来自《人月神话》)。&lt;/strong&gt;手术刀是业务驱动的，最需要全栈的人；他们的核心价值在于：懂业务，技术全面，都能拿的起来，而且能选择最合适的技术。代码专家是技术驱动的，即使不够全栈也可以用，但是技能树点的越多当然有好处。&lt;/p&gt;

&lt;p&gt;如果你现在是一名开发，那我如何做。而在技术选择上以“关注商业目标”和“关注用户体验”为原则。脱离商业目标的技术都不会得到长期的认可，脱离用户体验的产品终究被淘汰掉。在华为，你做一名开发，首先要&lt;strong&gt;主动关注前期需求分析&lt;/strong&gt;。发现问题，洞察需求，才能设计出实现方案，最终的实现也不太大的偏离。我一直比较反感我们想需求，觉得应该是这样的。或者做些用户根本不会使用的需求。但现在组织结构决定了我们不能向客户靠近太多。那我们能做的就是多与SE讨论，规格是一种载体，把问题讨论清楚，澄清准确是关键。开发也要意识到需求分析，设计不仅仅是SE的事。不懂设计的开发也不是一名合格的开发。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;吃自己的狗食。&lt;/strong&gt;真正的工程师是能真正明白软件开发不单单只是编码，还更要明白整个软件工程。只明白或是只喜欢编码的，那只是码农，不能称之为工程师。程序员要干几乎有的事，从需求分析，设计，编码，集成，测试，部署，从头到尾。如果你不能切身体会到自己干的烂事，自己的痛苦，你就不会有想要去改进的动机。没有痛苦，就不会真正地去思考，没有真正的思考，就没有真正的进步。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;学会测试与体验。&lt;/strong&gt;只有了解了测试的难度，你才明白怎么写出可测试的软件，怎么去做测试的自动化和测试系统。只有自己去使用自己的系统，你才明白用户的反馈，用户的想法，和用户的需求。开发如果都不知道怎么做测试，那还能期望测试能帮助你测试？开发人员本来就要测试自己写的软件，如果开发人员不懂测试，或是对测试不专业，那么这就不是一个专业的开发人员。开发人员了解整个软件的设计和开发过程，开发人员是最清楚应该怎么测试的，这包括单元测试，功能测试，性能测试，回归测试等。开发人员知道怎么测试是最有效的。开发人员的技术能力知道怎么才能更好的做测试。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;切忌摇摆不定。&lt;/strong&gt;我们学习技能和知识，不是为了成为某个领域的专家；而是完成自己目标所需要的。今天学C，明天学Java；今天搞Cloudify，明天搞CF。主张“先精后广，一专多长”的流程来学习，不要左右摇摆，先做一件事件再说。你所学，所使用的是要切合当前业务目标的。当然也要清楚地认清任何技术只是服务于市场的，在市场发生变化，如果程序员不能顺应发生变化，就有被淘汰的风险。人的角色也是不断变化的。8/2定律在哪都适用，全掌握20%常用技能的人，但这20%的技能会有80%的几率被用到，剩下那80%不常用的，让我们Google吧。另外具体经验也是相当的重要，任何的项目，你可以思考一下我学到什么经验。更重要的是思维方式和学习能力。项目中总会遇到各种问题，问题摆在那里你就需要去解决，而无论这要求你去钻研什么。这就是我所说的学习能力。&lt;/p&gt;

&lt;p&gt;我不生产博文，只是互联网的搬运工。以上观点与内容来源于互联网，感谢伟大的互联网。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>优秀程序员</title>
      <link>http://lanlingzi.cn/post/thoughts/2013/1113_good_programmer/</link>
      <pubDate>Wed, 13 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://lanlingzi.cn/post/thoughts/2013/1113_good_programmer/</guid>
      <description>&lt;p&gt;关于什么是一名合格的程序员，优秀的程序员，这些讨论从来没有停止过，标准各不相同。有人说优秀程序员追求简洁的代码，优秀的框架结构，新的技术技能。我们不是在讨论什么是业界大牛，我心中的一名优秀程序具备如下几个素质：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;简洁高效&lt;/p&gt;

&lt;p&gt;优秀的程序员会使用整洁，易于理解的方式解决实际的问题，任何不必要的复杂代码均不会出现，简单比复杂更具有价值。能通过简洁的方式把复杂的问题解决掉。
&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;开放心态&lt;/p&gt;

&lt;p&gt;不要盲目自信，自负，在IT这个领域，新知识层出不穷，你永远不可能全部掌握，在某些领域，你一定会是低人一等。教条、狭隘与不切实际的表现往往让你变得越来越自负，也会越来越陷入一个很小的框框内。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;切合实际&lt;/p&gt;

&lt;p&gt;软件开发，不是理念的教堂，也不是技能的校场。忽略实际情况，再精妙的代码解决不了问题，也只是一纸空文。优秀程序能打破常规，找到问题的本质，快速地，简洁地解决问题。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;质量保证&lt;/p&gt;

&lt;p&gt;态度明确，能一直以我交付的代码一定要是高质量的目标。对代码负责，会不停地优化与重构自己的代码。对代码充分的测试与验证，极少的Bugs。只会写代码，不会测试的程序员不是优秀的程序员。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;积累分享&lt;/p&gt;

&lt;p&gt;平时注重通过研究新的技术，新的软件工程方法，来为以前无法解决的一些软件问题提供更优的方法。能对软件开发中的实践进行总续与升华，将自己所掌握的东西转成显式的知识，并能通知多种方式进行分享。知识的传承的重要性远远大于代码本身。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;热爱编程&lt;/p&gt;

&lt;p&gt;不要做只会编码的码农，热爱生活，才能享受编程带来的快乐。热爱编码，热爱自已的职业。如果对编码没有热情，只是一种谋生手段，那最终在编程这一条路也不会走得太深。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;沟通反馈&lt;/p&gt;

&lt;p&gt;在软件开发领域，尤其是大的系统开发，不可能是单打独斗。学会在团队中沟通，与同事协作一起完成任务。同时也要识别不合理的需求，懂得拒绝别人，学会Say No。在项目中，要明确自己的计划，明确自己的职责。要学习与同事，项目经理及时反馈。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
  </channel>
</rss>