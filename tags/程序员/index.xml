<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>程序员 on 蘭陵N散記</title>
    <link>http://lanlingzi.cn/tags/%E7%A8%8B%E5%BA%8F%E5%91%98/index.xml</link>
    <description>Recent content in 程序员 on 蘭陵N散記</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <atom:link href="http://lanlingzi.cn/tags/%E7%A8%8B%E5%BA%8F%E5%91%98/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>35还能做技术吗</title>
      <link>http://lanlingzi.cn/post/thoughts/2017/0208_35_change/</link>
      <pubDate>Wed, 08 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>http://lanlingzi.cn/post/thoughts/2017/0208_35_change/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://lanlingzi.cn/images/change/change.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;最近我司心声社区到处充斥着在40岁左右惯例的帖子，之前觉得这些觉得离自己很远。不经意发现自己今年也35岁了，惯例这一天迟早会来临，只是早晚而已，按目前现状，再为公司奋斗也不会有太多年了，你想奋斗关键公司不让你啊。最近也陆续听到之前曾经共事的同事，或由于身体原因，被沟通退休或离职；或由于绩效平平，合同到期不再续签；或由于种种原因，被进入战备预备队前途不明。公司主营业务已遇到瓶颈，整个行业暮色深沉，新的领域就开拓不足，公司高层也不断地发文要打粮食，熵减等等。总之：“山雨欲来风满楼”。&lt;/p&gt;

&lt;p&gt;35岁应该是一个年富力强的年龄，不应该发出“今年35，还能做技术吗？”这样的话题，其中透露出一丝不自信。话说三十而立，但目前这个年龄段，我是上有老，下有小，身上还背着几百万的房贷，说没有压力不是可能的。作一名软件工程师，在国内来说其职业生涯是相当短的。而我一直从事软件相关的工作，目前虽是做软件架构设计，但还是喜欢写写代码，一直没有找到自己明确的发展方向，一方面有我自身的性格原因，一方面能力的确有些偏科。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;我非常能理解公司最近一些HR政策，企业为了保持长期的活力，换血难免。不管这事是否有多么无情，站在企业的角度来说无疑是正确的，毕竟企业不是慈善机构。公司也不可能让一个上了年龄、有家室的人一直从事一线编码工作。公司注重的是流程管理，觉得编码也可以像产业工人一样批量地生产。而年轻人更能干得多，给予得少。即使最近提倡的工程师文化，也是很难真正地做到，越提倡说明越缺失。&lt;/p&gt;

&lt;p&gt;先简单说一说我为什么走上软件开发这一条路的经历吧：&lt;/p&gt;

&lt;p&gt;90年代还是读初中时，老爸单位就开始使用电脑记账，那时觉得电脑太神奇了。个人虽买不起电脑，而要求老爸买了学习机，当时按着说明书，用basic语言输出满屏幕的各种形状的图型，心中也被巨大的喜悦填满。目前我清楚地记得，我爷爷看到我能在学习机上打出全家的名字，觉得这个是怎么做到的而不可思议。&lt;/p&gt;

&lt;p&gt;高考那一年，我一表哥从大学里寄来一本小说《第一次亲密地接触》，讲得就是网络交友，原来交朋友也可能通过互联网，当时觉得这个太好玩了。于是高考填写志愿，我报了某211计算机专业，可惜语文成绩刚及格，总分数不够（在本省就招3个，我排名第6，我爸通过关系才知道的）。还好有个第三志愿保底，并且填写可以调剂，于是我调转到另一所大学，学的是信息管理。妈蛋，到学校才知道，这个信息管理其实与计算机不太相关，虽然也会学些计算机原理，C语言编程等。但这不是主业，主业是信息检索，运筹学，是一个从图书馆管理发展起来杂学科，什么都学，什么都浅。&lt;/p&gt;

&lt;p&gt;大学一年级第二学期就买了电脑，一买电脑，就没有心思学习了，第一年还拿奖学金，后面连课不上了。每天大部分时间都在折腾电脑，重装系统，Win系统不知安装了多少次；Linux当时还远没有现在好用，也折腾过蓝点，RedHat。除了折腾就是打游戏，或者泡在网上看各种论坛。计算机理论没有怎么学，但其间还是有些编程的基础，曾获得校编程比赛三等奖。后面也和同学搞搞网站，系网站还是我们整理的，界面虽然丑点，但蛮有满足感。&lt;/p&gt;

&lt;p&gt;04年大学毕业后就来了深圳，开始家里就给我安排了一份工作，是做物业管理。但我不是这种菜，没有干一天，就辞职不做了，现在想想年轻就是任性啊。出来就自己开始找工作，找来找去，发现只有做网站的公司要我，于是第一年我就在一家当时在体育界还算小有名气的小公司做一名程序员，负责后台的程序开发，从此就踏上了软件开发这一条道路。后来05年华为大规模地招新四军，经过电话面试，当面做题，也没有怎么答好就稀里糊涂地来了华为，真还得谢谢当时的技面官。后面更没有想到的事，有些同学纷纷转行，中间也有过多次的机会离开，而我却一干就是12年了。&lt;/p&gt;

&lt;p&gt;在华为一直干得比较辛苦，结婚生小孩之后，发现再不能跟小伙伴一直挑灯夜战了。之前也不是没有奋斗过：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;去国外出差，可以整夜不睡觉，为了就是调通一个功能，等着明天客户可以验收。而这样的状况是持续的，每天吃不好，睡不着，最后回来发现落下胃病。&lt;/li&gt;
&lt;li&gt;可以持续一个多月每天晚上11:30下班，回到公司附近的出租屋倒头就睡，明天又接着干。&lt;/li&gt;
&lt;li&gt;可以凌晨不知几点，一个电话把你叫醒，说日志发到你邮箱，尽快定位解决问题。&lt;/li&gt;
&lt;li&gt;可以明知道不可能完成的任务，还是坚持答应下来，即使周末过来，也要加班加点把它做完。&lt;/li&gt;
&lt;li&gt;&amp;hellip;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;当过了三十多岁，的确现发现状态不如以前了，说一下感受吧：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;明显感觉体力不行了。以前定位解决问题，搞到凌晨三四点也没有什么睡意，第二天精神也不错。现在如果要搞到凌晨或通宵的话，后面两三天觉得身心疲惫。&lt;/li&gt;
&lt;li&gt;亚健康状态，平时锻炼比较少。每年的体检都有不少的问题，坐久了时间就觉得腰，颈椎痛。&lt;/li&gt;
&lt;li&gt;记忆力没有以前好了。以前看过的代码，长时间能记住，定位问题总是比其它人快速。看过的资料，吸收没有哪么快了，记得的东西有时突然就想不起来。&lt;/li&gt;
&lt;li&gt;明显感觉脑力跟不上了。以前码代码非常地快，一周就写10K；现在写代码总是思前想后，生产率没有那么高，但现在质量可能更好一些。想问题时注意力容易被打断，打断之后再难回神。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;当然这些年也积累了非常多的经验：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;尤其是攻关方面，我总是能解决问题，因为之前踩过不少的坑，看过不少的坑，也解决过不少的坑，问题总是本质一样的。写代码会本能地避免，定位总是会举一反三。&lt;/li&gt;
&lt;li&gt;知道怎么去做方案设计，分解并指导新人完成一个系统。有些问题能轻车熟路，以前解决类似问题的方案可以拿来复用。&lt;/li&gt;
&lt;li&gt;知道系统架构一些设计原则，理论基础，抽象建模，知道如何去权衡一些方案的利弊等。&lt;/li&gt;
&lt;li&gt;知识不再局限于编程语言，知道从多角度，多层次来看待一些问题，也在尝试去提炼一些编程之外的东西。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;热爱与钻研技术这个没有错，也不会随着年龄大了就不行了。虽然软件界的技术日新月益，编程语言层出不穷，各种框架各领风骚，但解决实现问题的经验与能力是非常重要的。现在你跟一群年轻人去拼体力拼时间，肯定是拼不过了，唯有作出转变。以前可能是“我能力强，效率高，部门的关键人物”，其实那是错的，不可替代性才是最有价值的。“人无远虑，必有近忧”，平时不妨努力提升自己，专注于某一领域，你能想到别人所想不到的，您能解决别人所处理不了的。编程只是一种解决问题的手段，技术也不仅仅只是编程。简单地说对于通用软件领域，当前主要的价值是如何构建分布式的架构体系统，以应对不断变化的商业模式与体量。&lt;/p&gt;

&lt;p&gt;当然上面说的还是一条技术路线，更重要的是你想明白技术只是为了产品，为了商业模式服务的。要让自己增值，不再吃码农的青春饭，那就要改变自己的想法，以快速适应未知的变化。积累系统架构经验，积累技术把控能力，积累对商业的理解，积累发现机会的敏感，果敢地作出改变。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>要学会思维图形化</title>
      <link>http://lanlingzi.cn/post/thoughts/2016/1118_arch_drawing/</link>
      <pubDate>Fri, 18 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>http://lanlingzi.cn/post/thoughts/2016/1118_arch_drawing/</guid>
      <description>&lt;p&gt;曾经，我幼稚地认为：只有写好代码才能对产品最“大”的贡献。什么需求分析文档，架构设计文档，没有最终的代码落地，那就是一张张的空纸。那些职位高高在上的架构师们，就也是写写胶片，画画图，他们又不懂技术细节，天天开会讨论来，讨论去都是在空谈一切。没有我们这些屌丝写的代码，你让他们去实现，估计几年也搞不出来。我写代码的能力比他们顶上N个人；再看看人家老外，60/70岁了还在码代码。为什么我国到了30岁了，都不去写代码了，都去搞所谓的架构设计了。是他们写代码写不好才去干架构师活吗？&lt;/p&gt;

&lt;p&gt;经过这么多年在产品中挖坑、填坑，发现我们的产品是越来越复杂，但使用上也是越来越复杂，问题也是越来越难理清。我们的问题到底是出在什么地方：
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;数据不可靠，系统常出错&lt;/li&gt;
&lt;li&gt;增加新需求困难，场景总是覆盖不全&lt;/li&gt;
&lt;li&gt;系统之间集成各种问题难以轻易解决&lt;/li&gt;
&lt;li&gt;交付不同局点，代码总是改来改去&lt;/li&gt;
&lt;li&gt;每年代码量成倍增加，前辈的代码看不懂、改不动&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这其实是光写好代码是不能解决上述问题的。只有你经历过，感受到，才能认识到系统的架构是何其重要。作为曾经一名码农，这几年一直在设计部与架构部工作，总是羡慕那些高级别的架构师：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;他们思考问题角度完全不同，总能高屋建瓴概括总结&lt;/li&gt;
&lt;li&gt;他们思考问题比较全面，又能抽象提炼，让人快速抓住要要点&lt;/li&gt;
&lt;li&gt;他们们输出的胶片、图画非常简洁，优美，明了，无二义&lt;/li&gt;
&lt;li&gt;他们画出来图来指导解决集成问题，往往能一针见血地说明关键之处&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;为什么他们的图能画得那么好，胶片写得那么牛，而我们似乎绞尽脑汁也难画出一张满意的图，难写出几张像样的胶片，是什么原因？是画得太少，写得太少，经验不足，方法不对，无灵感，还是天赋？&lt;/p&gt;

&lt;p&gt;看到&lt;a href=&#34;https://zhuanlan.zhihu.com/intelligence&#34;&gt;采铜&lt;/a&gt;老师的文章才悄然大悟：原来，&lt;strong&gt;不仅是因为架构师需要丰富的实践经验、敏锐的分析能力，以及系统性的建模能力&lt;/strong&gt;，更主要的是因为：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;日常我们通过文字/讲故事是线性叙述，是人和时间的结合；而画图，是人与空间结合，理有助于思维拓展&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;推荐阅读：&lt;br /&gt;
[1] &lt;a href=&#34;https://zhuanlan.zhihu.com/p/19874517&#34;&gt;思维运筹学导论（原理篇）&lt;/a&gt;&lt;br /&gt;
[2] &lt;a href=&#34;https://zhuanlan.zhihu.com/p/19888228&#34;&gt;思维运筹学导论（实践篇 · 图形化 · 上）&lt;/a&gt;&lt;br /&gt;
[3] &lt;a href=&#34;https://zhuanlan.zhihu.com/p/19891814&#34;&gt;思维运筹学导论（实践篇 · 图形化 · 下）&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>做一名好的开发人员</title>
      <link>http://lanlingzi.cn/post/thoughts/2014/0729_better_developer/</link>
      <pubDate>Tue, 29 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>http://lanlingzi.cn/post/thoughts/2014/0729_better_developer/</guid>
      <description>&lt;p&gt;我在上一次的新员工交流会议上，问新员工对全栈工程师了解不，我们的目标是成为一名全栈工作师，而不是做一名只会写代码的码工。最近遇到一些不开心的事，可能是在华为呆久了，发现到底都要会学扯皮。而我性情不太喜欢做一些自认为这些是无意义的事情。虽然有前辈告诉我，扯皮可能的效果会让你少加班几个月。说着说着，有点偏了，扯皮其实是沟通成本。项目越大，沟通成本越高。带个项目的人都会意识到，项目中的人力是1+1&amp;lt;2的，人越多效率越低。因为沟通是需要成本的，不同技术的人各说各话，前端和后端是一定会掐架的。每个人都会为自己的利益而战，毫不为已的人是不存在的。&lt;/p&gt;

&lt;p&gt;减少沟通成本，我们需要全栈工程师，因为各种技术都懂，胸有成竹，自己就全做了。即使是在团队协作中，与不同技术人员的沟通也会容易得多。懂你的，你懂的，相互理解，也就少了很多的时间在扯。

那什么是全栈工程师：通俗地讲，掌握多种技能，并能利用多种技能独立完成产品的人。打外比方，全栈工程师就是一个能独立盖一幢10层小洋楼的人，而普通工程师，则是可以和一群人盖一幢摩天大楼的人。较搞地讲，全栈工程师=**丝战斗机=系统+网络+研发+DBA+架构+安全=没女朋友/没男朋友，拿一份工资做三份事情，公司的奋斗者，其它人眼中的牛人，傻X。有人说了，你再牛X，你懂五种技术，你能干五个人的活吗？全栈工程师并不是说一个人能干几个人的活，而是要从多个方面来看这个问题。&lt;/p&gt;

&lt;p&gt;我们遇到了什么问题？产品在报怨平台；开发在报怨SE没有搞清需求，规格写得不清不楚，不了解系统实现；测试在报怨开发，问题太多，Story写不好，自测试不充分；开发在报怨测试，不了解系统，机械提单，单的质量低，场景不符合业务。听多报怨，人也会变成急躁不安。心平气和，放下争端，谁都想开心上班，开心下班。报怨也是解决不了问题，反而是有摧卸责任之嫌。&lt;/p&gt;

&lt;p&gt;那在华为，全栈工程师能解决上面的问题吗？不能！首先，在华为，细化的分工很难培养出全栈工程师，那你还提全栈工程师有什么用。一名的好的开发者，能缓和一些项目中的扯皮矛盾。好的开发者，即使不是全栈，也要融会贯通多种技术。我从来不认为一个只专精一种技术的人有可能成为好的开发者。从广度和深度的组合看，我认为好的开发者大概有两种类型：&lt;strong&gt;1)手术刀;2)代码专家(来自《人月神话》)。&lt;/strong&gt;手术刀是业务驱动的，最需要全栈的人；他们的核心价值在于：懂业务，技术全面，都能拿的起来，而且能选择最合适的技术。代码专家是技术驱动的，即使不够全栈也可以用，但是技能树点的越多当然有好处。&lt;/p&gt;

&lt;p&gt;如果你现在是一名开发，那我如何做。而在技术选择上以“关注商业目标”和“关注用户体验”为原则。脱离商业目标的技术都不会得到长期的认可，脱离用户体验的产品终究被淘汰掉。在华为，你做一名开发，首先要&lt;strong&gt;主动关注前期需求分析&lt;/strong&gt;。发现问题，洞察需求，才能设计出实现方案，最终的实现也不太大的偏离。我一直比较反感我们想需求，觉得应该是这样的。或者做些用户根本不会使用的需求。但现在组织结构决定了我们不能向客户靠近太多。那我们能做的就是多与SE讨论，规格是一种载体，把问题讨论清楚，澄清准确是关键。开发也要意识到需求分析，设计不仅仅是SE的事。不懂设计的开发也不是一名合格的开发。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;吃自己的狗食。&lt;/strong&gt;真正的工程师是能真正明白软件开发不单单只是编码，还更要明白整个软件工程。只明白或是只喜欢编码的，那只是码农，不能称之为工程师。程序员要干几乎有的事，从需求分析，设计，编码，集成，测试，部署，从头到尾。如果你不能切身体会到自己干的烂事，自己的痛苦，你就不会有想要去改进的动机。没有痛苦，就不会真正地去思考，没有真正的思考，就没有真正的进步。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;学会测试与体验。&lt;/strong&gt;只有了解了测试的难度，你才明白怎么写出可测试的软件，怎么去做测试的自动化和测试系统。只有自己去使用自己的系统，你才明白用户的反馈，用户的想法，和用户的需求。开发如果都不知道怎么做测试，那还能期望测试能帮助你测试？开发人员本来就要测试自己写的软件，如果开发人员不懂测试，或是对测试不专业，那么这就不是一个专业的开发人员。开发人员了解整个软件的设计和开发过程，开发人员是最清楚应该怎么测试的，这包括单元测试，功能测试，性能测试，回归测试等。开发人员知道怎么测试是最有效的。开发人员的技术能力知道怎么才能更好的做测试。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;切忌摇摆不定。&lt;/strong&gt;我们学习技能和知识，不是为了成为某个领域的专家；而是完成自己目标所需要的。今天学C，明天学Java；今天搞Cloudify，明天搞CF。主张“先精后广，一专多长”的流程来学习，不要左右摇摆，先做一件事件再说。你所学，所使用的是要切合当前业务目标的。当然也要清楚地认清任何技术只是服务于市场的，在市场发生变化，如果程序员不能顺应发生变化，就有被淘汰的风险。人的角色也是不断变化的。8/2定律在哪都适用，全掌握20%常用技能的人，但这20%的技能会有80%的几率被用到，剩下那80%不常用的，让我们Google吧。另外具体经验也是相当的重要，任何的项目，你可以思考一下我学到什么经验。更重要的是思维方式和学习能力。项目中总会遇到各种问题，问题摆在那里你就需要去解决，而无论这要求你去钻研什么。这就是我所说的学习能力。&lt;/p&gt;

&lt;p&gt;我不生产博文，只是互联网的搬运工。以上观点与内容来源于互联网，感谢伟大的互联网。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>优秀程序员</title>
      <link>http://lanlingzi.cn/post/thoughts/2013/1113_good_programmer/</link>
      <pubDate>Wed, 13 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://lanlingzi.cn/post/thoughts/2013/1113_good_programmer/</guid>
      <description>&lt;p&gt;关于什么是一名合格的程序员，优秀的程序员，这些讨论从来没有停止过，标准各不相同。有人说优秀程序员追求简洁的代码，优秀的框架结构，新的技术技能。我们不是在讨论什么是业界大牛，我心中的一名优秀程序具备如下几个素质：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;简洁高效&lt;/p&gt;

&lt;p&gt;优秀的程序员会使用整洁，易于理解的方式解决实际的问题，任何不必要的复杂代码均不会出现，简单比复杂更具有价值。能通过简洁的方式把复杂的问题解决掉。
&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;开放心态&lt;/p&gt;

&lt;p&gt;不要盲目自信，自负，在IT这个领域，新知识层出不穷，你永远不可能全部掌握，在某些领域，你一定会是低人一等。教条、狭隘与不切实际的表现往往让你变得越来越自负，也会越来越陷入一个很小的框框内。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;切合实际&lt;/p&gt;

&lt;p&gt;软件开发，不是理念的教堂，也不是技能的校场。忽略实际情况，再精妙的代码解决不了问题，也只是一纸空文。优秀程序能打破常规，找到问题的本质，快速地，简洁地解决问题。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;质量保证&lt;/p&gt;

&lt;p&gt;态度明确，能一直以我交付的代码一定要是高质量的目标。对代码负责，会不停地优化与重构自己的代码。对代码充分的测试与验证，极少的Bugs。只会写代码，不会测试的程序员不是优秀的程序员。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;积累分享&lt;/p&gt;

&lt;p&gt;平时注重通过研究新的技术，新的软件工程方法，来为以前无法解决的一些软件问题提供更优的方法。能对软件开发中的实践进行总续与升华，将自己所掌握的东西转成显式的知识，并能通知多种方式进行分享。知识的传承的重要性远远大于代码本身。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;热爱编程&lt;/p&gt;

&lt;p&gt;不要做只会编码的码农，热爱生活，才能享受编程带来的快乐。热爱编码，热爱自已的职业。如果对编码没有热情，只是一种谋生手段，那最终在编程这一条路也不会走得太深。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;沟通反馈&lt;/p&gt;

&lt;p&gt;在软件开发领域，尤其是大的系统开发，不可能是单打独斗。学会在团队中沟通，与同事协作一起完成任务。同时也要识别不合理的需求，懂得拒绝别人，学会Say No。在项目中，要明确自己的计划，明确自己的职责。要学习与同事，项目经理及时反馈。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
  </channel>
</rss>